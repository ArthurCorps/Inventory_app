
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    User_car: User_carPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    email: string
    createdAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type ManufacturerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Manufacturer"
  objects: {
    Car: CarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    country: string | null
    flag: string | null
    photo: string | null
  }, ExtArgs["result"]["manufacturer"]>
  composites: {}
}

/**
 * Model Manufacturer
 * 
 */
export type Manufacturer = runtime.Types.DefaultSelection<ManufacturerPayload>
export type YearPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Year"
  objects: {
    Car: CarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    year: number
    total: number | null
  }, ExtArgs["result"]["year"]>
  composites: {}
}

/**
 * Model Year
 * 
 */
export type Year = runtime.Types.DefaultSelection<YearPayload>
export type ColorsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Colors"
  objects: {
    Car: CarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    hex: string
  }, ExtArgs["result"]["colors"]>
  composites: {}
}

/**
 * Model Colors
 * 
 */
export type Colors = runtime.Types.DefaultSelection<ColorsPayload>
export type TreasureHuntPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "TreasureHunt"
  objects: {
    Car: CarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    letter: string
    name: string
  }, ExtArgs["result"]["treasureHunt"]>
  composites: {}
}

/**
 * Model TreasureHunt
 * 
 */
export type TreasureHunt = runtime.Types.DefaultSelection<TreasureHuntPayload>
export type CompanyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Company"
  objects: {
    Car: CarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    photo: string | null
  }, ExtArgs["result"]["company"]>
  composites: {}
}

/**
 * Model Company
 * 
 */
export type Company = runtime.Types.DefaultSelection<CompanyPayload>
export type ExclusivePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Exclusive"
  objects: {
    Car: CarPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    letter: string
    name: string
    photo: string | null
  }, ExtArgs["result"]["exclusive"]>
  composites: {}
}

/**
 * Model Exclusive
 * 
 */
export type Exclusive = runtime.Types.DefaultSelection<ExclusivePayload>
export type CarPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Car"
  objects: {
    User_car: User_carPayload<ExtArgs>[]
    manufacture: ManufacturerPayload<ExtArgs>
    color: ColorsPayload<ExtArgs>
    year: YearPayload<ExtArgs>
    treasureHunt: TreasureHuntPayload<ExtArgs>
    company: CompanyPayload<ExtArgs>
    exclusive: ExclusivePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    manufactureId: number
    code: string | null
    yearId: number
    year_number: number | null
    colorId: number
    color_wikia: string | null
    rubber: boolean
    custom: boolean
    treasure_huntId: number
    new_model: boolean
    companyId: number
    exclusiveId: number
    type: string | null
    loose: boolean
    price_buy: number | null
    price_sell: number | null
    sell: boolean
  }, ExtArgs["result"]["car"]>
  composites: {}
}

/**
 * Model Car
 * 
 */
export type Car = runtime.Types.DefaultSelection<CarPayload>
export type User_carPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User_car"
  objects: {
    user_id: UserPayload<ExtArgs>
    car_id: CarPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    userId: string
    carId: number
  }, ExtArgs["result"]["user_car"]>
  composites: {}
}

/**
 * Model User_car
 * 
 */
export type User_car = runtime.Types.DefaultSelection<User_carPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.manufacturer`: Exposes CRUD operations for the **Manufacturer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Manufacturers
    * const manufacturers = await prisma.manufacturer.findMany()
    * ```
    */
  get manufacturer(): Prisma.ManufacturerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.year`: Exposes CRUD operations for the **Year** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Years
    * const years = await prisma.year.findMany()
    * ```
    */
  get year(): Prisma.YearDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.colors`: Exposes CRUD operations for the **Colors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colors
    * const colors = await prisma.colors.findMany()
    * ```
    */
  get colors(): Prisma.ColorsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.treasureHunt`: Exposes CRUD operations for the **TreasureHunt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TreasureHunts
    * const treasureHunts = await prisma.treasureHunt.findMany()
    * ```
    */
  get treasureHunt(): Prisma.TreasureHuntDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.exclusive`: Exposes CRUD operations for the **Exclusive** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exclusives
    * const exclusives = await prisma.exclusive.findMany()
    * ```
    */
  get exclusive(): Prisma.ExclusiveDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.car`: Exposes CRUD operations for the **Car** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.car.findMany()
    * ```
    */
  get car(): Prisma.CarDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user_car`: Exposes CRUD operations for the **User_car** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_cars
    * const user_cars = await prisma.user_car.findMany()
    * ```
    */
  get user_car(): Prisma.User_carDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Manufacturer: 'Manufacturer',
    Year: 'Year',
    Colors: 'Colors',
    TreasureHunt: 'TreasureHunt',
    Company: 'Company',
    Exclusive: 'Exclusive',
    Car: 'Car',
    User_car: 'User_car'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'manufacturer' | 'year' | 'colors' | 'treasureHunt' | 'company' | 'exclusive' | 'car' | 'user_car'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Manufacturer: {
        payload: ManufacturerPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ManufacturerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManufacturerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>
          }
          findFirst: {
            args: Prisma.ManufacturerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManufacturerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>
          }
          findMany: {
            args: Prisma.ManufacturerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>[]
          }
          create: {
            args: Prisma.ManufacturerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>
          }
          delete: {
            args: Prisma.ManufacturerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>
          }
          update: {
            args: Prisma.ManufacturerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>
          }
          deleteMany: {
            args: Prisma.ManufacturerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ManufacturerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ManufacturerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ManufacturerPayload>
          }
          aggregate: {
            args: Prisma.ManufacturerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateManufacturer>
          }
          groupBy: {
            args: Prisma.ManufacturerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ManufacturerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManufacturerCountArgs<ExtArgs>,
            result: $Utils.Optional<ManufacturerCountAggregateOutputType> | number
          }
        }
      }
      Year: {
        payload: YearPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.YearFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YearFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>
          }
          findFirst: {
            args: Prisma.YearFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YearFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>
          }
          findMany: {
            args: Prisma.YearFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>[]
          }
          create: {
            args: Prisma.YearCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>
          }
          delete: {
            args: Prisma.YearDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>
          }
          update: {
            args: Prisma.YearUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>
          }
          deleteMany: {
            args: Prisma.YearDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.YearUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.YearUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<YearPayload>
          }
          aggregate: {
            args: Prisma.YearAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateYear>
          }
          groupBy: {
            args: Prisma.YearGroupByArgs<ExtArgs>,
            result: $Utils.Optional<YearGroupByOutputType>[]
          }
          count: {
            args: Prisma.YearCountArgs<ExtArgs>,
            result: $Utils.Optional<YearCountAggregateOutputType> | number
          }
        }
      }
      Colors: {
        payload: ColorsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ColorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>
          }
          findFirst: {
            args: Prisma.ColorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>
          }
          findMany: {
            args: Prisma.ColorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>[]
          }
          create: {
            args: Prisma.ColorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>
          }
          delete: {
            args: Prisma.ColorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>
          }
          update: {
            args: Prisma.ColorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>
          }
          deleteMany: {
            args: Prisma.ColorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ColorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ColorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ColorsPayload>
          }
          aggregate: {
            args: Prisma.ColorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateColors>
          }
          groupBy: {
            args: Prisma.ColorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ColorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColorsCountArgs<ExtArgs>,
            result: $Utils.Optional<ColorsCountAggregateOutputType> | number
          }
        }
      }
      TreasureHunt: {
        payload: TreasureHuntPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TreasureHuntFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreasureHuntFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>
          }
          findFirst: {
            args: Prisma.TreasureHuntFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreasureHuntFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>
          }
          findMany: {
            args: Prisma.TreasureHuntFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>[]
          }
          create: {
            args: Prisma.TreasureHuntCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>
          }
          delete: {
            args: Prisma.TreasureHuntDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>
          }
          update: {
            args: Prisma.TreasureHuntUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>
          }
          deleteMany: {
            args: Prisma.TreasureHuntDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TreasureHuntUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TreasureHuntUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TreasureHuntPayload>
          }
          aggregate: {
            args: Prisma.TreasureHuntAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTreasureHunt>
          }
          groupBy: {
            args: Prisma.TreasureHuntGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TreasureHuntGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreasureHuntCountArgs<ExtArgs>,
            result: $Utils.Optional<TreasureHuntCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: CompanyPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Exclusive: {
        payload: ExclusivePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ExclusiveFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExclusiveFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>
          }
          findFirst: {
            args: Prisma.ExclusiveFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExclusiveFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>
          }
          findMany: {
            args: Prisma.ExclusiveFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>[]
          }
          create: {
            args: Prisma.ExclusiveCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>
          }
          delete: {
            args: Prisma.ExclusiveDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>
          }
          update: {
            args: Prisma.ExclusiveUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>
          }
          deleteMany: {
            args: Prisma.ExclusiveDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExclusiveUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExclusiveUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExclusivePayload>
          }
          aggregate: {
            args: Prisma.ExclusiveAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExclusive>
          }
          groupBy: {
            args: Prisma.ExclusiveGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExclusiveGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExclusiveCountArgs<ExtArgs>,
            result: $Utils.Optional<ExclusiveCountAggregateOutputType> | number
          }
        }
      }
      Car: {
        payload: CarPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>
          }
          findFirst: {
            args: Prisma.CarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>
          }
          findMany: {
            args: Prisma.CarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>[]
          }
          create: {
            args: Prisma.CarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>
          }
          delete: {
            args: Prisma.CarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>
          }
          update: {
            args: Prisma.CarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>
          }
          deleteMany: {
            args: Prisma.CarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CarPayload>
          }
          aggregate: {
            args: Prisma.CarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCar>
          }
          groupBy: {
            args: Prisma.CarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarCountArgs<ExtArgs>,
            result: $Utils.Optional<CarCountAggregateOutputType> | number
          }
        }
      }
      User_car: {
        payload: User_carPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.User_carFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.User_carFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>
          }
          findFirst: {
            args: Prisma.User_carFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.User_carFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>
          }
          findMany: {
            args: Prisma.User_carFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>[]
          }
          create: {
            args: Prisma.User_carCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>
          }
          delete: {
            args: Prisma.User_carDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>
          }
          update: {
            args: Prisma.User_carUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>
          }
          deleteMany: {
            args: Prisma.User_carDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.User_carUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.User_carUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<User_carPayload>
          }
          aggregate: {
            args: Prisma.User_carAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_car>
          }
          groupBy: {
            args: Prisma.User_carGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_carGroupByOutputType>[]
          }
          count: {
            args: Prisma.User_carCountArgs<ExtArgs>,
            result: $Utils.Optional<User_carCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    User_car: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User_car?: boolean | UserCountOutputTypeCountUser_carArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_carArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: User_carWhereInput
  }



  /**
   * Count Type ManufacturerCountOutputType
   */


  export type ManufacturerCountOutputType = {
    Car: number
  }

  export type ManufacturerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | ManufacturerCountOutputTypeCountCarArgs
  }

  // Custom InputTypes

  /**
   * ManufacturerCountOutputType without action
   */
  export type ManufacturerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufacturerCountOutputType
     */
    select?: ManufacturerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ManufacturerCountOutputType without action
   */
  export type ManufacturerCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }



  /**
   * Count Type YearCountOutputType
   */


  export type YearCountOutputType = {
    Car: number
  }

  export type YearCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | YearCountOutputTypeCountCarArgs
  }

  // Custom InputTypes

  /**
   * YearCountOutputType without action
   */
  export type YearCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YearCountOutputType
     */
    select?: YearCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * YearCountOutputType without action
   */
  export type YearCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }



  /**
   * Count Type ColorsCountOutputType
   */


  export type ColorsCountOutputType = {
    Car: number
  }

  export type ColorsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | ColorsCountOutputTypeCountCarArgs
  }

  // Custom InputTypes

  /**
   * ColorsCountOutputType without action
   */
  export type ColorsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColorsCountOutputType
     */
    select?: ColorsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ColorsCountOutputType without action
   */
  export type ColorsCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }



  /**
   * Count Type TreasureHuntCountOutputType
   */


  export type TreasureHuntCountOutputType = {
    Car: number
  }

  export type TreasureHuntCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | TreasureHuntCountOutputTypeCountCarArgs
  }

  // Custom InputTypes

  /**
   * TreasureHuntCountOutputType without action
   */
  export type TreasureHuntCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHuntCountOutputType
     */
    select?: TreasureHuntCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TreasureHuntCountOutputType without action
   */
  export type TreasureHuntCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }



  /**
   * Count Type CompanyCountOutputType
   */


  export type CompanyCountOutputType = {
    Car: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | CompanyCountOutputTypeCountCarArgs
  }

  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }



  /**
   * Count Type ExclusiveCountOutputType
   */


  export type ExclusiveCountOutputType = {
    Car: number
  }

  export type ExclusiveCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | ExclusiveCountOutputTypeCountCarArgs
  }

  // Custom InputTypes

  /**
   * ExclusiveCountOutputType without action
   */
  export type ExclusiveCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExclusiveCountOutputType
     */
    select?: ExclusiveCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExclusiveCountOutputType without action
   */
  export type ExclusiveCountOutputTypeCountCarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
  }



  /**
   * Count Type CarCountOutputType
   */


  export type CarCountOutputType = {
    User_car: number
  }

  export type CarCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User_car?: boolean | CarCountOutputTypeCountUser_carArgs
  }

  // Custom InputTypes

  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarCountOutputType
     */
    select?: CarCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CarCountOutputType without action
   */
  export type CarCountOutputTypeCountUser_carArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: User_carWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    User_car?: boolean | User$User_carArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User_car?: boolean | User$User_carArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User_car<T extends User$User_carArgs<ExtArgs> = {}>(args?: Subset<T, User$User_carArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.User_car
   */
  export type User$User_carArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    where?: User_carWhereInput
    orderBy?: Enumerable<User_carOrderByWithRelationInput>
    cursor?: User_carWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<User_carScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Manufacturer
   */


  export type AggregateManufacturer = {
    _count: ManufacturerCountAggregateOutputType | null
    _avg: ManufacturerAvgAggregateOutputType | null
    _sum: ManufacturerSumAggregateOutputType | null
    _min: ManufacturerMinAggregateOutputType | null
    _max: ManufacturerMaxAggregateOutputType | null
  }

  export type ManufacturerAvgAggregateOutputType = {
    id: number | null
  }

  export type ManufacturerSumAggregateOutputType = {
    id: number | null
  }

  export type ManufacturerMinAggregateOutputType = {
    id: number | null
    name: string | null
    country: string | null
    flag: string | null
    photo: string | null
  }

  export type ManufacturerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    country: string | null
    flag: string | null
    photo: string | null
  }

  export type ManufacturerCountAggregateOutputType = {
    id: number
    name: number
    country: number
    flag: number
    photo: number
    _all: number
  }


  export type ManufacturerAvgAggregateInputType = {
    id?: true
  }

  export type ManufacturerSumAggregateInputType = {
    id?: true
  }

  export type ManufacturerMinAggregateInputType = {
    id?: true
    name?: true
    country?: true
    flag?: true
    photo?: true
  }

  export type ManufacturerMaxAggregateInputType = {
    id?: true
    name?: true
    country?: true
    flag?: true
    photo?: true
  }

  export type ManufacturerCountAggregateInputType = {
    id?: true
    name?: true
    country?: true
    flag?: true
    photo?: true
    _all?: true
  }

  export type ManufacturerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manufacturer to aggregate.
     */
    where?: ManufacturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufacturers to fetch.
     */
    orderBy?: Enumerable<ManufacturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManufacturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufacturers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufacturers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Manufacturers
    **/
    _count?: true | ManufacturerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManufacturerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManufacturerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManufacturerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManufacturerMaxAggregateInputType
  }

  export type GetManufacturerAggregateType<T extends ManufacturerAggregateArgs> = {
        [P in keyof T & keyof AggregateManufacturer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManufacturer[P]>
      : GetScalarType<T[P], AggregateManufacturer[P]>
  }




  export type ManufacturerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ManufacturerWhereInput
    orderBy?: Enumerable<ManufacturerOrderByWithAggregationInput>
    by: ManufacturerScalarFieldEnum[]
    having?: ManufacturerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManufacturerCountAggregateInputType | true
    _avg?: ManufacturerAvgAggregateInputType
    _sum?: ManufacturerSumAggregateInputType
    _min?: ManufacturerMinAggregateInputType
    _max?: ManufacturerMaxAggregateInputType
  }


  export type ManufacturerGroupByOutputType = {
    id: number
    name: string
    country: string | null
    flag: string | null
    photo: string | null
    _count: ManufacturerCountAggregateOutputType | null
    _avg: ManufacturerAvgAggregateOutputType | null
    _sum: ManufacturerSumAggregateOutputType | null
    _min: ManufacturerMinAggregateOutputType | null
    _max: ManufacturerMaxAggregateOutputType | null
  }

  type GetManufacturerGroupByPayload<T extends ManufacturerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ManufacturerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManufacturerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManufacturerGroupByOutputType[P]>
            : GetScalarType<T[P], ManufacturerGroupByOutputType[P]>
        }
      >
    >


  export type ManufacturerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    country?: boolean
    flag?: boolean
    photo?: boolean
    Car?: boolean | Manufacturer$CarArgs<ExtArgs>
    _count?: boolean | ManufacturerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["manufacturer"]>

  export type ManufacturerSelectScalar = {
    id?: boolean
    name?: boolean
    country?: boolean
    flag?: boolean
    photo?: boolean
  }

  export type ManufacturerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | Manufacturer$CarArgs<ExtArgs>
    _count?: boolean | ManufacturerCountOutputTypeArgs<ExtArgs>
  }


  type ManufacturerGetPayload<S extends boolean | null | undefined | ManufacturerArgs> = $Types.GetResult<ManufacturerPayload, S>

  type ManufacturerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ManufacturerFindManyArgs, 'select' | 'include'> & {
      select?: ManufacturerCountAggregateInputType | true
    }

  export interface ManufacturerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manufacturer'], meta: { name: 'Manufacturer' } }
    /**
     * Find zero or one Manufacturer that matches the filter.
     * @param {ManufacturerFindUniqueArgs} args - Arguments to find a Manufacturer
     * @example
     * // Get one Manufacturer
     * const manufacturer = await prisma.manufacturer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ManufacturerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ManufacturerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Manufacturer'> extends True ? Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Manufacturer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ManufacturerFindUniqueOrThrowArgs} args - Arguments to find a Manufacturer
     * @example
     * // Get one Manufacturer
     * const manufacturer = await prisma.manufacturer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ManufacturerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ManufacturerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Manufacturer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerFindFirstArgs} args - Arguments to find a Manufacturer
     * @example
     * // Get one Manufacturer
     * const manufacturer = await prisma.manufacturer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ManufacturerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ManufacturerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Manufacturer'> extends True ? Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Manufacturer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerFindFirstOrThrowArgs} args - Arguments to find a Manufacturer
     * @example
     * // Get one Manufacturer
     * const manufacturer = await prisma.manufacturer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ManufacturerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ManufacturerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Manufacturers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Manufacturers
     * const manufacturers = await prisma.manufacturer.findMany()
     * 
     * // Get first 10 Manufacturers
     * const manufacturers = await prisma.manufacturer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manufacturerWithIdOnly = await prisma.manufacturer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ManufacturerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManufacturerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Manufacturer.
     * @param {ManufacturerCreateArgs} args - Arguments to create a Manufacturer.
     * @example
     * // Create one Manufacturer
     * const Manufacturer = await prisma.manufacturer.create({
     *   data: {
     *     // ... data to create a Manufacturer
     *   }
     * })
     * 
    **/
    create<T extends ManufacturerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ManufacturerCreateArgs<ExtArgs>>
    ): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Manufacturer.
     * @param {ManufacturerDeleteArgs} args - Arguments to delete one Manufacturer.
     * @example
     * // Delete one Manufacturer
     * const Manufacturer = await prisma.manufacturer.delete({
     *   where: {
     *     // ... filter to delete one Manufacturer
     *   }
     * })
     * 
    **/
    delete<T extends ManufacturerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ManufacturerDeleteArgs<ExtArgs>>
    ): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Manufacturer.
     * @param {ManufacturerUpdateArgs} args - Arguments to update one Manufacturer.
     * @example
     * // Update one Manufacturer
     * const manufacturer = await prisma.manufacturer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ManufacturerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ManufacturerUpdateArgs<ExtArgs>>
    ): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Manufacturers.
     * @param {ManufacturerDeleteManyArgs} args - Arguments to filter Manufacturers to delete.
     * @example
     * // Delete a few Manufacturers
     * const { count } = await prisma.manufacturer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ManufacturerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ManufacturerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Manufacturers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Manufacturers
     * const manufacturer = await prisma.manufacturer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ManufacturerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ManufacturerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Manufacturer.
     * @param {ManufacturerUpsertArgs} args - Arguments to update or create a Manufacturer.
     * @example
     * // Update or create a Manufacturer
     * const manufacturer = await prisma.manufacturer.upsert({
     *   create: {
     *     // ... data to create a Manufacturer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manufacturer we want to update
     *   }
     * })
    **/
    upsert<T extends ManufacturerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ManufacturerUpsertArgs<ExtArgs>>
    ): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Manufacturers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerCountArgs} args - Arguments to filter Manufacturers to count.
     * @example
     * // Count the number of Manufacturers
     * const count = await prisma.manufacturer.count({
     *   where: {
     *     // ... the filter for the Manufacturers we want to count
     *   }
     * })
    **/
    count<T extends ManufacturerCountArgs>(
      args?: Subset<T, ManufacturerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManufacturerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manufacturer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManufacturerAggregateArgs>(args: Subset<T, ManufacturerAggregateArgs>): Prisma.PrismaPromise<GetManufacturerAggregateType<T>>

    /**
     * Group by Manufacturer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufacturerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManufacturerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManufacturerGroupByArgs['orderBy'] }
        : { orderBy?: ManufacturerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManufacturerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManufacturerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Manufacturer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ManufacturerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Car<T extends Manufacturer$CarArgs<ExtArgs> = {}>(args?: Subset<T, Manufacturer$CarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Manufacturer base type for findUnique actions
   */
  export type ManufacturerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * Filter, which Manufacturer to fetch.
     */
    where: ManufacturerWhereUniqueInput
  }

  /**
   * Manufacturer findUnique
   */
  export interface ManufacturerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ManufacturerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Manufacturer findUniqueOrThrow
   */
  export type ManufacturerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * Filter, which Manufacturer to fetch.
     */
    where: ManufacturerWhereUniqueInput
  }


  /**
   * Manufacturer base type for findFirst actions
   */
  export type ManufacturerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * Filter, which Manufacturer to fetch.
     */
    where?: ManufacturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufacturers to fetch.
     */
    orderBy?: Enumerable<ManufacturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manufacturers.
     */
    cursor?: ManufacturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufacturers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufacturers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manufacturers.
     */
    distinct?: Enumerable<ManufacturerScalarFieldEnum>
  }

  /**
   * Manufacturer findFirst
   */
  export interface ManufacturerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ManufacturerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Manufacturer findFirstOrThrow
   */
  export type ManufacturerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * Filter, which Manufacturer to fetch.
     */
    where?: ManufacturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufacturers to fetch.
     */
    orderBy?: Enumerable<ManufacturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manufacturers.
     */
    cursor?: ManufacturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufacturers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufacturers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manufacturers.
     */
    distinct?: Enumerable<ManufacturerScalarFieldEnum>
  }


  /**
   * Manufacturer findMany
   */
  export type ManufacturerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * Filter, which Manufacturers to fetch.
     */
    where?: ManufacturerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufacturers to fetch.
     */
    orderBy?: Enumerable<ManufacturerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Manufacturers.
     */
    cursor?: ManufacturerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufacturers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufacturers.
     */
    skip?: number
    distinct?: Enumerable<ManufacturerScalarFieldEnum>
  }


  /**
   * Manufacturer create
   */
  export type ManufacturerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * The data needed to create a Manufacturer.
     */
    data: XOR<ManufacturerCreateInput, ManufacturerUncheckedCreateInput>
  }


  /**
   * Manufacturer update
   */
  export type ManufacturerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * The data needed to update a Manufacturer.
     */
    data: XOR<ManufacturerUpdateInput, ManufacturerUncheckedUpdateInput>
    /**
     * Choose, which Manufacturer to update.
     */
    where: ManufacturerWhereUniqueInput
  }


  /**
   * Manufacturer updateMany
   */
  export type ManufacturerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Manufacturers.
     */
    data: XOR<ManufacturerUpdateManyMutationInput, ManufacturerUncheckedUpdateManyInput>
    /**
     * Filter which Manufacturers to update
     */
    where?: ManufacturerWhereInput
  }


  /**
   * Manufacturer upsert
   */
  export type ManufacturerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * The filter to search for the Manufacturer to update in case it exists.
     */
    where: ManufacturerWhereUniqueInput
    /**
     * In case the Manufacturer found by the `where` argument doesn't exist, create a new Manufacturer with this data.
     */
    create: XOR<ManufacturerCreateInput, ManufacturerUncheckedCreateInput>
    /**
     * In case the Manufacturer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManufacturerUpdateInput, ManufacturerUncheckedUpdateInput>
  }


  /**
   * Manufacturer delete
   */
  export type ManufacturerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
    /**
     * Filter which Manufacturer to delete.
     */
    where: ManufacturerWhereUniqueInput
  }


  /**
   * Manufacturer deleteMany
   */
  export type ManufacturerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manufacturers to delete
     */
    where?: ManufacturerWhereInput
  }


  /**
   * Manufacturer.Car
   */
  export type Manufacturer$CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Manufacturer without action
   */
  export type ManufacturerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacturer
     */
    select?: ManufacturerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ManufacturerInclude<ExtArgs> | null
  }



  /**
   * Model Year
   */


  export type AggregateYear = {
    _count: YearCountAggregateOutputType | null
    _avg: YearAvgAggregateOutputType | null
    _sum: YearSumAggregateOutputType | null
    _min: YearMinAggregateOutputType | null
    _max: YearMaxAggregateOutputType | null
  }

  export type YearAvgAggregateOutputType = {
    id: number | null
    year: number | null
    total: number | null
  }

  export type YearSumAggregateOutputType = {
    id: number | null
    year: number | null
    total: number | null
  }

  export type YearMinAggregateOutputType = {
    id: number | null
    year: number | null
    total: number | null
  }

  export type YearMaxAggregateOutputType = {
    id: number | null
    year: number | null
    total: number | null
  }

  export type YearCountAggregateOutputType = {
    id: number
    year: number
    total: number
    _all: number
  }


  export type YearAvgAggregateInputType = {
    id?: true
    year?: true
    total?: true
  }

  export type YearSumAggregateInputType = {
    id?: true
    year?: true
    total?: true
  }

  export type YearMinAggregateInputType = {
    id?: true
    year?: true
    total?: true
  }

  export type YearMaxAggregateInputType = {
    id?: true
    year?: true
    total?: true
  }

  export type YearCountAggregateInputType = {
    id?: true
    year?: true
    total?: true
    _all?: true
  }

  export type YearAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Year to aggregate.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: Enumerable<YearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Years
    **/
    _count?: true | YearCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YearAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YearSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YearMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YearMaxAggregateInputType
  }

  export type GetYearAggregateType<T extends YearAggregateArgs> = {
        [P in keyof T & keyof AggregateYear]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYear[P]>
      : GetScalarType<T[P], AggregateYear[P]>
  }




  export type YearGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: YearWhereInput
    orderBy?: Enumerable<YearOrderByWithAggregationInput>
    by: YearScalarFieldEnum[]
    having?: YearScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YearCountAggregateInputType | true
    _avg?: YearAvgAggregateInputType
    _sum?: YearSumAggregateInputType
    _min?: YearMinAggregateInputType
    _max?: YearMaxAggregateInputType
  }


  export type YearGroupByOutputType = {
    id: number
    year: number
    total: number | null
    _count: YearCountAggregateOutputType | null
    _avg: YearAvgAggregateOutputType | null
    _sum: YearSumAggregateOutputType | null
    _min: YearMinAggregateOutputType | null
    _max: YearMaxAggregateOutputType | null
  }

  type GetYearGroupByPayload<T extends YearGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YearGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YearGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YearGroupByOutputType[P]>
            : GetScalarType<T[P], YearGroupByOutputType[P]>
        }
      >
    >


  export type YearSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    year?: boolean
    total?: boolean
    Car?: boolean | Year$CarArgs<ExtArgs>
    _count?: boolean | YearCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["year"]>

  export type YearSelectScalar = {
    id?: boolean
    year?: boolean
    total?: boolean
  }

  export type YearInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | Year$CarArgs<ExtArgs>
    _count?: boolean | YearCountOutputTypeArgs<ExtArgs>
  }


  type YearGetPayload<S extends boolean | null | undefined | YearArgs> = $Types.GetResult<YearPayload, S>

  type YearCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<YearFindManyArgs, 'select' | 'include'> & {
      select?: YearCountAggregateInputType | true
    }

  export interface YearDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Year'], meta: { name: 'Year' } }
    /**
     * Find zero or one Year that matches the filter.
     * @param {YearFindUniqueArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YearFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YearFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Year'> extends True ? Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Year that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YearFindUniqueOrThrowArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YearFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Year that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearFindFirstArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YearFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YearFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Year'> extends True ? Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Year that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearFindFirstOrThrowArgs} args - Arguments to find a Year
     * @example
     * // Get one Year
     * const year = await prisma.year.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YearFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Years that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Years
     * const years = await prisma.year.findMany()
     * 
     * // Get first 10 Years
     * const years = await prisma.year.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yearWithIdOnly = await prisma.year.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YearFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, YearFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<YearPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Year.
     * @param {YearCreateArgs} args - Arguments to create a Year.
     * @example
     * // Create one Year
     * const Year = await prisma.year.create({
     *   data: {
     *     // ... data to create a Year
     *   }
     * })
     * 
    **/
    create<T extends YearCreateArgs<ExtArgs>>(
      args: SelectSubset<T, YearCreateArgs<ExtArgs>>
    ): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Year.
     * @param {YearDeleteArgs} args - Arguments to delete one Year.
     * @example
     * // Delete one Year
     * const Year = await prisma.year.delete({
     *   where: {
     *     // ... filter to delete one Year
     *   }
     * })
     * 
    **/
    delete<T extends YearDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, YearDeleteArgs<ExtArgs>>
    ): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Year.
     * @param {YearUpdateArgs} args - Arguments to update one Year.
     * @example
     * // Update one Year
     * const year = await prisma.year.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YearUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, YearUpdateArgs<ExtArgs>>
    ): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Years.
     * @param {YearDeleteManyArgs} args - Arguments to filter Years to delete.
     * @example
     * // Delete a few Years
     * const { count } = await prisma.year.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YearDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, YearDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Years
     * const year = await prisma.year.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YearUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, YearUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Year.
     * @param {YearUpsertArgs} args - Arguments to update or create a Year.
     * @example
     * // Update or create a Year
     * const year = await prisma.year.upsert({
     *   create: {
     *     // ... data to create a Year
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Year we want to update
     *   }
     * })
    **/
    upsert<T extends YearUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, YearUpsertArgs<ExtArgs>>
    ): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Years.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearCountArgs} args - Arguments to filter Years to count.
     * @example
     * // Count the number of Years
     * const count = await prisma.year.count({
     *   where: {
     *     // ... the filter for the Years we want to count
     *   }
     * })
    **/
    count<T extends YearCountArgs>(
      args?: Subset<T, YearCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YearCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YearAggregateArgs>(args: Subset<T, YearAggregateArgs>): Prisma.PrismaPromise<GetYearAggregateType<T>>

    /**
     * Group by Year.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YearGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YearGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YearGroupByArgs['orderBy'] }
        : { orderBy?: YearGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YearGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYearGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Year.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YearClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Car<T extends Year$CarArgs<ExtArgs> = {}>(args?: Subset<T, Year$CarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Year base type for findUnique actions
   */
  export type YearFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where: YearWhereUniqueInput
  }

  /**
   * Year findUnique
   */
  export interface YearFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends YearFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Year findUniqueOrThrow
   */
  export type YearFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year base type for findFirst actions
   */
  export type YearFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: Enumerable<YearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Years.
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Years.
     */
    distinct?: Enumerable<YearScalarFieldEnum>
  }

  /**
   * Year findFirst
   */
  export interface YearFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends YearFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Year findFirstOrThrow
   */
  export type YearFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Year to fetch.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: Enumerable<YearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Years.
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Years.
     */
    distinct?: Enumerable<YearScalarFieldEnum>
  }


  /**
   * Year findMany
   */
  export type YearFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter, which Years to fetch.
     */
    where?: YearWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Years to fetch.
     */
    orderBy?: Enumerable<YearOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Years.
     */
    cursor?: YearWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Years from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Years.
     */
    skip?: number
    distinct?: Enumerable<YearScalarFieldEnum>
  }


  /**
   * Year create
   */
  export type YearCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * The data needed to create a Year.
     */
    data: XOR<YearCreateInput, YearUncheckedCreateInput>
  }


  /**
   * Year update
   */
  export type YearUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * The data needed to update a Year.
     */
    data: XOR<YearUpdateInput, YearUncheckedUpdateInput>
    /**
     * Choose, which Year to update.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year updateMany
   */
  export type YearUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Years.
     */
    data: XOR<YearUpdateManyMutationInput, YearUncheckedUpdateManyInput>
    /**
     * Filter which Years to update
     */
    where?: YearWhereInput
  }


  /**
   * Year upsert
   */
  export type YearUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * The filter to search for the Year to update in case it exists.
     */
    where: YearWhereUniqueInput
    /**
     * In case the Year found by the `where` argument doesn't exist, create a new Year with this data.
     */
    create: XOR<YearCreateInput, YearUncheckedCreateInput>
    /**
     * In case the Year was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YearUpdateInput, YearUncheckedUpdateInput>
  }


  /**
   * Year delete
   */
  export type YearDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
    /**
     * Filter which Year to delete.
     */
    where: YearWhereUniqueInput
  }


  /**
   * Year deleteMany
   */
  export type YearDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Years to delete
     */
    where?: YearWhereInput
  }


  /**
   * Year.Car
   */
  export type Year$CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Year without action
   */
  export type YearArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Year
     */
    select?: YearSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YearInclude<ExtArgs> | null
  }



  /**
   * Model Colors
   */


  export type AggregateColors = {
    _count: ColorsCountAggregateOutputType | null
    _avg: ColorsAvgAggregateOutputType | null
    _sum: ColorsSumAggregateOutputType | null
    _min: ColorsMinAggregateOutputType | null
    _max: ColorsMaxAggregateOutputType | null
  }

  export type ColorsAvgAggregateOutputType = {
    id: number | null
  }

  export type ColorsSumAggregateOutputType = {
    id: number | null
  }

  export type ColorsMinAggregateOutputType = {
    id: number | null
    name: string | null
    hex: string | null
  }

  export type ColorsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    hex: string | null
  }

  export type ColorsCountAggregateOutputType = {
    id: number
    name: number
    hex: number
    _all: number
  }


  export type ColorsAvgAggregateInputType = {
    id?: true
  }

  export type ColorsSumAggregateInputType = {
    id?: true
  }

  export type ColorsMinAggregateInputType = {
    id?: true
    name?: true
    hex?: true
  }

  export type ColorsMaxAggregateInputType = {
    id?: true
    name?: true
    hex?: true
  }

  export type ColorsCountAggregateInputType = {
    id?: true
    name?: true
    hex?: true
    _all?: true
  }

  export type ColorsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colors to aggregate.
     */
    where?: ColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colors to fetch.
     */
    orderBy?: Enumerable<ColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colors
    **/
    _count?: true | ColorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ColorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ColorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColorsMaxAggregateInputType
  }

  export type GetColorsAggregateType<T extends ColorsAggregateArgs> = {
        [P in keyof T & keyof AggregateColors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColors[P]>
      : GetScalarType<T[P], AggregateColors[P]>
  }




  export type ColorsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ColorsWhereInput
    orderBy?: Enumerable<ColorsOrderByWithAggregationInput>
    by: ColorsScalarFieldEnum[]
    having?: ColorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColorsCountAggregateInputType | true
    _avg?: ColorsAvgAggregateInputType
    _sum?: ColorsSumAggregateInputType
    _min?: ColorsMinAggregateInputType
    _max?: ColorsMaxAggregateInputType
  }


  export type ColorsGroupByOutputType = {
    id: number
    name: string
    hex: string
    _count: ColorsCountAggregateOutputType | null
    _avg: ColorsAvgAggregateOutputType | null
    _sum: ColorsSumAggregateOutputType | null
    _min: ColorsMinAggregateOutputType | null
    _max: ColorsMaxAggregateOutputType | null
  }

  type GetColorsGroupByPayload<T extends ColorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ColorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColorsGroupByOutputType[P]>
            : GetScalarType<T[P], ColorsGroupByOutputType[P]>
        }
      >
    >


  export type ColorsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    hex?: boolean
    Car?: boolean | Colors$CarArgs<ExtArgs>
    _count?: boolean | ColorsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["colors"]>

  export type ColorsSelectScalar = {
    id?: boolean
    name?: boolean
    hex?: boolean
  }

  export type ColorsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | Colors$CarArgs<ExtArgs>
    _count?: boolean | ColorsCountOutputTypeArgs<ExtArgs>
  }


  type ColorsGetPayload<S extends boolean | null | undefined | ColorsArgs> = $Types.GetResult<ColorsPayload, S>

  type ColorsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ColorsFindManyArgs, 'select' | 'include'> & {
      select?: ColorsCountAggregateInputType | true
    }

  export interface ColorsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Colors'], meta: { name: 'Colors' } }
    /**
     * Find zero or one Colors that matches the filter.
     * @param {ColorsFindUniqueArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ColorsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ColorsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Colors'> extends True ? Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Colors that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ColorsFindUniqueOrThrowArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ColorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ColorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Colors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsFindFirstArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ColorsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ColorsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Colors'> extends True ? Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Colors that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsFindFirstOrThrowArgs} args - Arguments to find a Colors
     * @example
     * // Get one Colors
     * const colors = await prisma.colors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ColorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ColorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Colors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colors
     * const colors = await prisma.colors.findMany()
     * 
     * // Get first 10 Colors
     * const colors = await prisma.colors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colorsWithIdOnly = await prisma.colors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ColorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Colors.
     * @param {ColorsCreateArgs} args - Arguments to create a Colors.
     * @example
     * // Create one Colors
     * const Colors = await prisma.colors.create({
     *   data: {
     *     // ... data to create a Colors
     *   }
     * })
     * 
    **/
    create<T extends ColorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ColorsCreateArgs<ExtArgs>>
    ): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Colors.
     * @param {ColorsDeleteArgs} args - Arguments to delete one Colors.
     * @example
     * // Delete one Colors
     * const Colors = await prisma.colors.delete({
     *   where: {
     *     // ... filter to delete one Colors
     *   }
     * })
     * 
    **/
    delete<T extends ColorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ColorsDeleteArgs<ExtArgs>>
    ): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Colors.
     * @param {ColorsUpdateArgs} args - Arguments to update one Colors.
     * @example
     * // Update one Colors
     * const colors = await prisma.colors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ColorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ColorsUpdateArgs<ExtArgs>>
    ): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Colors.
     * @param {ColorsDeleteManyArgs} args - Arguments to filter Colors to delete.
     * @example
     * // Delete a few Colors
     * const { count } = await prisma.colors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ColorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colors
     * const colors = await prisma.colors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ColorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ColorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Colors.
     * @param {ColorsUpsertArgs} args - Arguments to update or create a Colors.
     * @example
     * // Update or create a Colors
     * const colors = await prisma.colors.upsert({
     *   create: {
     *     // ... data to create a Colors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colors we want to update
     *   }
     * })
    **/
    upsert<T extends ColorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ColorsUpsertArgs<ExtArgs>>
    ): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsCountArgs} args - Arguments to filter Colors to count.
     * @example
     * // Count the number of Colors
     * const count = await prisma.colors.count({
     *   where: {
     *     // ... the filter for the Colors we want to count
     *   }
     * })
    **/
    count<T extends ColorsCountArgs>(
      args?: Subset<T, ColorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColorsAggregateArgs>(args: Subset<T, ColorsAggregateArgs>): Prisma.PrismaPromise<GetColorsAggregateType<T>>

    /**
     * Group by Colors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColorsGroupByArgs['orderBy'] }
        : { orderBy?: ColorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Colors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ColorsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Car<T extends Colors$CarArgs<ExtArgs> = {}>(args?: Subset<T, Colors$CarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Colors base type for findUnique actions
   */
  export type ColorsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * Filter, which Colors to fetch.
     */
    where: ColorsWhereUniqueInput
  }

  /**
   * Colors findUnique
   */
  export interface ColorsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ColorsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Colors findUniqueOrThrow
   */
  export type ColorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * Filter, which Colors to fetch.
     */
    where: ColorsWhereUniqueInput
  }


  /**
   * Colors base type for findFirst actions
   */
  export type ColorsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * Filter, which Colors to fetch.
     */
    where?: ColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colors to fetch.
     */
    orderBy?: Enumerable<ColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colors.
     */
    cursor?: ColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colors.
     */
    distinct?: Enumerable<ColorsScalarFieldEnum>
  }

  /**
   * Colors findFirst
   */
  export interface ColorsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ColorsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Colors findFirstOrThrow
   */
  export type ColorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * Filter, which Colors to fetch.
     */
    where?: ColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colors to fetch.
     */
    orderBy?: Enumerable<ColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colors.
     */
    cursor?: ColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colors.
     */
    distinct?: Enumerable<ColorsScalarFieldEnum>
  }


  /**
   * Colors findMany
   */
  export type ColorsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * Filter, which Colors to fetch.
     */
    where?: ColorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colors to fetch.
     */
    orderBy?: Enumerable<ColorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colors.
     */
    cursor?: ColorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colors.
     */
    skip?: number
    distinct?: Enumerable<ColorsScalarFieldEnum>
  }


  /**
   * Colors create
   */
  export type ColorsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * The data needed to create a Colors.
     */
    data: XOR<ColorsCreateInput, ColorsUncheckedCreateInput>
  }


  /**
   * Colors update
   */
  export type ColorsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * The data needed to update a Colors.
     */
    data: XOR<ColorsUpdateInput, ColorsUncheckedUpdateInput>
    /**
     * Choose, which Colors to update.
     */
    where: ColorsWhereUniqueInput
  }


  /**
   * Colors updateMany
   */
  export type ColorsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Colors.
     */
    data: XOR<ColorsUpdateManyMutationInput, ColorsUncheckedUpdateManyInput>
    /**
     * Filter which Colors to update
     */
    where?: ColorsWhereInput
  }


  /**
   * Colors upsert
   */
  export type ColorsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * The filter to search for the Colors to update in case it exists.
     */
    where: ColorsWhereUniqueInput
    /**
     * In case the Colors found by the `where` argument doesn't exist, create a new Colors with this data.
     */
    create: XOR<ColorsCreateInput, ColorsUncheckedCreateInput>
    /**
     * In case the Colors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColorsUpdateInput, ColorsUncheckedUpdateInput>
  }


  /**
   * Colors delete
   */
  export type ColorsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
    /**
     * Filter which Colors to delete.
     */
    where: ColorsWhereUniqueInput
  }


  /**
   * Colors deleteMany
   */
  export type ColorsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colors to delete
     */
    where?: ColorsWhereInput
  }


  /**
   * Colors.Car
   */
  export type Colors$CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Colors without action
   */
  export type ColorsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colors
     */
    select?: ColorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ColorsInclude<ExtArgs> | null
  }



  /**
   * Model TreasureHunt
   */


  export type AggregateTreasureHunt = {
    _count: TreasureHuntCountAggregateOutputType | null
    _avg: TreasureHuntAvgAggregateOutputType | null
    _sum: TreasureHuntSumAggregateOutputType | null
    _min: TreasureHuntMinAggregateOutputType | null
    _max: TreasureHuntMaxAggregateOutputType | null
  }

  export type TreasureHuntAvgAggregateOutputType = {
    id: number | null
  }

  export type TreasureHuntSumAggregateOutputType = {
    id: number | null
  }

  export type TreasureHuntMinAggregateOutputType = {
    id: number | null
    letter: string | null
    name: string | null
  }

  export type TreasureHuntMaxAggregateOutputType = {
    id: number | null
    letter: string | null
    name: string | null
  }

  export type TreasureHuntCountAggregateOutputType = {
    id: number
    letter: number
    name: number
    _all: number
  }


  export type TreasureHuntAvgAggregateInputType = {
    id?: true
  }

  export type TreasureHuntSumAggregateInputType = {
    id?: true
  }

  export type TreasureHuntMinAggregateInputType = {
    id?: true
    letter?: true
    name?: true
  }

  export type TreasureHuntMaxAggregateInputType = {
    id?: true
    letter?: true
    name?: true
  }

  export type TreasureHuntCountAggregateInputType = {
    id?: true
    letter?: true
    name?: true
    _all?: true
  }

  export type TreasureHuntAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreasureHunt to aggregate.
     */
    where?: TreasureHuntWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreasureHunts to fetch.
     */
    orderBy?: Enumerable<TreasureHuntOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreasureHuntWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreasureHunts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreasureHunts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TreasureHunts
    **/
    _count?: true | TreasureHuntCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreasureHuntAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreasureHuntSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreasureHuntMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreasureHuntMaxAggregateInputType
  }

  export type GetTreasureHuntAggregateType<T extends TreasureHuntAggregateArgs> = {
        [P in keyof T & keyof AggregateTreasureHunt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreasureHunt[P]>
      : GetScalarType<T[P], AggregateTreasureHunt[P]>
  }




  export type TreasureHuntGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TreasureHuntWhereInput
    orderBy?: Enumerable<TreasureHuntOrderByWithAggregationInput>
    by: TreasureHuntScalarFieldEnum[]
    having?: TreasureHuntScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreasureHuntCountAggregateInputType | true
    _avg?: TreasureHuntAvgAggregateInputType
    _sum?: TreasureHuntSumAggregateInputType
    _min?: TreasureHuntMinAggregateInputType
    _max?: TreasureHuntMaxAggregateInputType
  }


  export type TreasureHuntGroupByOutputType = {
    id: number
    letter: string
    name: string
    _count: TreasureHuntCountAggregateOutputType | null
    _avg: TreasureHuntAvgAggregateOutputType | null
    _sum: TreasureHuntSumAggregateOutputType | null
    _min: TreasureHuntMinAggregateOutputType | null
    _max: TreasureHuntMaxAggregateOutputType | null
  }

  type GetTreasureHuntGroupByPayload<T extends TreasureHuntGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TreasureHuntGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreasureHuntGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreasureHuntGroupByOutputType[P]>
            : GetScalarType<T[P], TreasureHuntGroupByOutputType[P]>
        }
      >
    >


  export type TreasureHuntSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    letter?: boolean
    name?: boolean
    Car?: boolean | TreasureHunt$CarArgs<ExtArgs>
    _count?: boolean | TreasureHuntCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["treasureHunt"]>

  export type TreasureHuntSelectScalar = {
    id?: boolean
    letter?: boolean
    name?: boolean
  }

  export type TreasureHuntInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | TreasureHunt$CarArgs<ExtArgs>
    _count?: boolean | TreasureHuntCountOutputTypeArgs<ExtArgs>
  }


  type TreasureHuntGetPayload<S extends boolean | null | undefined | TreasureHuntArgs> = $Types.GetResult<TreasureHuntPayload, S>

  type TreasureHuntCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TreasureHuntFindManyArgs, 'select' | 'include'> & {
      select?: TreasureHuntCountAggregateInputType | true
    }

  export interface TreasureHuntDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TreasureHunt'], meta: { name: 'TreasureHunt' } }
    /**
     * Find zero or one TreasureHunt that matches the filter.
     * @param {TreasureHuntFindUniqueArgs} args - Arguments to find a TreasureHunt
     * @example
     * // Get one TreasureHunt
     * const treasureHunt = await prisma.treasureHunt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TreasureHuntFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TreasureHuntFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TreasureHunt'> extends True ? Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one TreasureHunt that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TreasureHuntFindUniqueOrThrowArgs} args - Arguments to find a TreasureHunt
     * @example
     * // Get one TreasureHunt
     * const treasureHunt = await prisma.treasureHunt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TreasureHuntFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TreasureHuntFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first TreasureHunt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntFindFirstArgs} args - Arguments to find a TreasureHunt
     * @example
     * // Get one TreasureHunt
     * const treasureHunt = await prisma.treasureHunt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TreasureHuntFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TreasureHuntFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TreasureHunt'> extends True ? Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first TreasureHunt that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntFindFirstOrThrowArgs} args - Arguments to find a TreasureHunt
     * @example
     * // Get one TreasureHunt
     * const treasureHunt = await prisma.treasureHunt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TreasureHuntFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TreasureHuntFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more TreasureHunts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TreasureHunts
     * const treasureHunts = await prisma.treasureHunt.findMany()
     * 
     * // Get first 10 TreasureHunts
     * const treasureHunts = await prisma.treasureHunt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treasureHuntWithIdOnly = await prisma.treasureHunt.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TreasureHuntFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TreasureHuntFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a TreasureHunt.
     * @param {TreasureHuntCreateArgs} args - Arguments to create a TreasureHunt.
     * @example
     * // Create one TreasureHunt
     * const TreasureHunt = await prisma.treasureHunt.create({
     *   data: {
     *     // ... data to create a TreasureHunt
     *   }
     * })
     * 
    **/
    create<T extends TreasureHuntCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TreasureHuntCreateArgs<ExtArgs>>
    ): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a TreasureHunt.
     * @param {TreasureHuntDeleteArgs} args - Arguments to delete one TreasureHunt.
     * @example
     * // Delete one TreasureHunt
     * const TreasureHunt = await prisma.treasureHunt.delete({
     *   where: {
     *     // ... filter to delete one TreasureHunt
     *   }
     * })
     * 
    **/
    delete<T extends TreasureHuntDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TreasureHuntDeleteArgs<ExtArgs>>
    ): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one TreasureHunt.
     * @param {TreasureHuntUpdateArgs} args - Arguments to update one TreasureHunt.
     * @example
     * // Update one TreasureHunt
     * const treasureHunt = await prisma.treasureHunt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TreasureHuntUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TreasureHuntUpdateArgs<ExtArgs>>
    ): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more TreasureHunts.
     * @param {TreasureHuntDeleteManyArgs} args - Arguments to filter TreasureHunts to delete.
     * @example
     * // Delete a few TreasureHunts
     * const { count } = await prisma.treasureHunt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TreasureHuntDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TreasureHuntDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreasureHunts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TreasureHunts
     * const treasureHunt = await prisma.treasureHunt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TreasureHuntUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TreasureHuntUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TreasureHunt.
     * @param {TreasureHuntUpsertArgs} args - Arguments to update or create a TreasureHunt.
     * @example
     * // Update or create a TreasureHunt
     * const treasureHunt = await prisma.treasureHunt.upsert({
     *   create: {
     *     // ... data to create a TreasureHunt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TreasureHunt we want to update
     *   }
     * })
    **/
    upsert<T extends TreasureHuntUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TreasureHuntUpsertArgs<ExtArgs>>
    ): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of TreasureHunts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntCountArgs} args - Arguments to filter TreasureHunts to count.
     * @example
     * // Count the number of TreasureHunts
     * const count = await prisma.treasureHunt.count({
     *   where: {
     *     // ... the filter for the TreasureHunts we want to count
     *   }
     * })
    **/
    count<T extends TreasureHuntCountArgs>(
      args?: Subset<T, TreasureHuntCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreasureHuntCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TreasureHunt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreasureHuntAggregateArgs>(args: Subset<T, TreasureHuntAggregateArgs>): Prisma.PrismaPromise<GetTreasureHuntAggregateType<T>>

    /**
     * Group by TreasureHunt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreasureHuntGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreasureHuntGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreasureHuntGroupByArgs['orderBy'] }
        : { orderBy?: TreasureHuntGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreasureHuntGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreasureHuntGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TreasureHunt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TreasureHuntClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Car<T extends TreasureHunt$CarArgs<ExtArgs> = {}>(args?: Subset<T, TreasureHunt$CarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TreasureHunt base type for findUnique actions
   */
  export type TreasureHuntFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * Filter, which TreasureHunt to fetch.
     */
    where: TreasureHuntWhereUniqueInput
  }

  /**
   * TreasureHunt findUnique
   */
  export interface TreasureHuntFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TreasureHuntFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TreasureHunt findUniqueOrThrow
   */
  export type TreasureHuntFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * Filter, which TreasureHunt to fetch.
     */
    where: TreasureHuntWhereUniqueInput
  }


  /**
   * TreasureHunt base type for findFirst actions
   */
  export type TreasureHuntFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * Filter, which TreasureHunt to fetch.
     */
    where?: TreasureHuntWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreasureHunts to fetch.
     */
    orderBy?: Enumerable<TreasureHuntOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreasureHunts.
     */
    cursor?: TreasureHuntWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreasureHunts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreasureHunts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreasureHunts.
     */
    distinct?: Enumerable<TreasureHuntScalarFieldEnum>
  }

  /**
   * TreasureHunt findFirst
   */
  export interface TreasureHuntFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TreasureHuntFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TreasureHunt findFirstOrThrow
   */
  export type TreasureHuntFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * Filter, which TreasureHunt to fetch.
     */
    where?: TreasureHuntWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreasureHunts to fetch.
     */
    orderBy?: Enumerable<TreasureHuntOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreasureHunts.
     */
    cursor?: TreasureHuntWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreasureHunts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreasureHunts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreasureHunts.
     */
    distinct?: Enumerable<TreasureHuntScalarFieldEnum>
  }


  /**
   * TreasureHunt findMany
   */
  export type TreasureHuntFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * Filter, which TreasureHunts to fetch.
     */
    where?: TreasureHuntWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreasureHunts to fetch.
     */
    orderBy?: Enumerable<TreasureHuntOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TreasureHunts.
     */
    cursor?: TreasureHuntWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreasureHunts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreasureHunts.
     */
    skip?: number
    distinct?: Enumerable<TreasureHuntScalarFieldEnum>
  }


  /**
   * TreasureHunt create
   */
  export type TreasureHuntCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * The data needed to create a TreasureHunt.
     */
    data: XOR<TreasureHuntCreateInput, TreasureHuntUncheckedCreateInput>
  }


  /**
   * TreasureHunt update
   */
  export type TreasureHuntUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * The data needed to update a TreasureHunt.
     */
    data: XOR<TreasureHuntUpdateInput, TreasureHuntUncheckedUpdateInput>
    /**
     * Choose, which TreasureHunt to update.
     */
    where: TreasureHuntWhereUniqueInput
  }


  /**
   * TreasureHunt updateMany
   */
  export type TreasureHuntUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TreasureHunts.
     */
    data: XOR<TreasureHuntUpdateManyMutationInput, TreasureHuntUncheckedUpdateManyInput>
    /**
     * Filter which TreasureHunts to update
     */
    where?: TreasureHuntWhereInput
  }


  /**
   * TreasureHunt upsert
   */
  export type TreasureHuntUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * The filter to search for the TreasureHunt to update in case it exists.
     */
    where: TreasureHuntWhereUniqueInput
    /**
     * In case the TreasureHunt found by the `where` argument doesn't exist, create a new TreasureHunt with this data.
     */
    create: XOR<TreasureHuntCreateInput, TreasureHuntUncheckedCreateInput>
    /**
     * In case the TreasureHunt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreasureHuntUpdateInput, TreasureHuntUncheckedUpdateInput>
  }


  /**
   * TreasureHunt delete
   */
  export type TreasureHuntDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
    /**
     * Filter which TreasureHunt to delete.
     */
    where: TreasureHuntWhereUniqueInput
  }


  /**
   * TreasureHunt deleteMany
   */
  export type TreasureHuntDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreasureHunts to delete
     */
    where?: TreasureHuntWhereInput
  }


  /**
   * TreasureHunt.Car
   */
  export type TreasureHunt$CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * TreasureHunt without action
   */
  export type TreasureHuntArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreasureHunt
     */
    select?: TreasureHuntSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreasureHuntInclude<ExtArgs> | null
  }



  /**
   * Model Company
   */


  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    name: string | null
    photo: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    photo: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    photo: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    photo?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    photo?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    photo?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: Enumerable<CompanyOrderByWithAggregationInput>
    by: CompanyScalarFieldEnum[]
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }


  export type CompanyGroupByOutputType = {
    id: number
    name: string
    photo: string | null
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    photo?: boolean
    Car?: boolean | Company$CarArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    photo?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | Company$CarArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeArgs<ExtArgs>
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyArgs> = $Types.GetResult<CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Company'> extends True ? Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Company'> extends True ? Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Car<T extends Company$CarArgs<ExtArgs> = {}>(args?: Subset<T, Company$CarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Company base type for findUnique actions
   */
  export type CompanyFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUnique
   */
  export interface CompanyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CompanyFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company base type for findFirst actions
   */
  export type CompanyFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }

  /**
   * Company findFirst
   */
  export interface CompanyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CompanyFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.Car
   */
  export type Company$CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Company without action
   */
  export type CompanyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
  }



  /**
   * Model Exclusive
   */


  export type AggregateExclusive = {
    _count: ExclusiveCountAggregateOutputType | null
    _avg: ExclusiveAvgAggregateOutputType | null
    _sum: ExclusiveSumAggregateOutputType | null
    _min: ExclusiveMinAggregateOutputType | null
    _max: ExclusiveMaxAggregateOutputType | null
  }

  export type ExclusiveAvgAggregateOutputType = {
    id: number | null
  }

  export type ExclusiveSumAggregateOutputType = {
    id: number | null
  }

  export type ExclusiveMinAggregateOutputType = {
    id: number | null
    letter: string | null
    name: string | null
    photo: string | null
  }

  export type ExclusiveMaxAggregateOutputType = {
    id: number | null
    letter: string | null
    name: string | null
    photo: string | null
  }

  export type ExclusiveCountAggregateOutputType = {
    id: number
    letter: number
    name: number
    photo: number
    _all: number
  }


  export type ExclusiveAvgAggregateInputType = {
    id?: true
  }

  export type ExclusiveSumAggregateInputType = {
    id?: true
  }

  export type ExclusiveMinAggregateInputType = {
    id?: true
    letter?: true
    name?: true
    photo?: true
  }

  export type ExclusiveMaxAggregateInputType = {
    id?: true
    letter?: true
    name?: true
    photo?: true
  }

  export type ExclusiveCountAggregateInputType = {
    id?: true
    letter?: true
    name?: true
    photo?: true
    _all?: true
  }

  export type ExclusiveAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exclusive to aggregate.
     */
    where?: ExclusiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exclusives to fetch.
     */
    orderBy?: Enumerable<ExclusiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExclusiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exclusives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exclusives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exclusives
    **/
    _count?: true | ExclusiveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExclusiveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExclusiveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExclusiveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExclusiveMaxAggregateInputType
  }

  export type GetExclusiveAggregateType<T extends ExclusiveAggregateArgs> = {
        [P in keyof T & keyof AggregateExclusive]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExclusive[P]>
      : GetScalarType<T[P], AggregateExclusive[P]>
  }




  export type ExclusiveGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExclusiveWhereInput
    orderBy?: Enumerable<ExclusiveOrderByWithAggregationInput>
    by: ExclusiveScalarFieldEnum[]
    having?: ExclusiveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExclusiveCountAggregateInputType | true
    _avg?: ExclusiveAvgAggregateInputType
    _sum?: ExclusiveSumAggregateInputType
    _min?: ExclusiveMinAggregateInputType
    _max?: ExclusiveMaxAggregateInputType
  }


  export type ExclusiveGroupByOutputType = {
    id: number
    letter: string
    name: string
    photo: string | null
    _count: ExclusiveCountAggregateOutputType | null
    _avg: ExclusiveAvgAggregateOutputType | null
    _sum: ExclusiveSumAggregateOutputType | null
    _min: ExclusiveMinAggregateOutputType | null
    _max: ExclusiveMaxAggregateOutputType | null
  }

  type GetExclusiveGroupByPayload<T extends ExclusiveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExclusiveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExclusiveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExclusiveGroupByOutputType[P]>
            : GetScalarType<T[P], ExclusiveGroupByOutputType[P]>
        }
      >
    >


  export type ExclusiveSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    letter?: boolean
    name?: boolean
    photo?: boolean
    Car?: boolean | Exclusive$CarArgs<ExtArgs>
    _count?: boolean | ExclusiveCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["exclusive"]>

  export type ExclusiveSelectScalar = {
    id?: boolean
    letter?: boolean
    name?: boolean
    photo?: boolean
  }

  export type ExclusiveInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Car?: boolean | Exclusive$CarArgs<ExtArgs>
    _count?: boolean | ExclusiveCountOutputTypeArgs<ExtArgs>
  }


  type ExclusiveGetPayload<S extends boolean | null | undefined | ExclusiveArgs> = $Types.GetResult<ExclusivePayload, S>

  type ExclusiveCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ExclusiveFindManyArgs, 'select' | 'include'> & {
      select?: ExclusiveCountAggregateInputType | true
    }

  export interface ExclusiveDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exclusive'], meta: { name: 'Exclusive' } }
    /**
     * Find zero or one Exclusive that matches the filter.
     * @param {ExclusiveFindUniqueArgs} args - Arguments to find a Exclusive
     * @example
     * // Get one Exclusive
     * const exclusive = await prisma.exclusive.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExclusiveFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExclusiveFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Exclusive'> extends True ? Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Exclusive that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExclusiveFindUniqueOrThrowArgs} args - Arguments to find a Exclusive
     * @example
     * // Get one Exclusive
     * const exclusive = await prisma.exclusive.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExclusiveFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExclusiveFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Exclusive that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveFindFirstArgs} args - Arguments to find a Exclusive
     * @example
     * // Get one Exclusive
     * const exclusive = await prisma.exclusive.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExclusiveFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExclusiveFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Exclusive'> extends True ? Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Exclusive that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveFindFirstOrThrowArgs} args - Arguments to find a Exclusive
     * @example
     * // Get one Exclusive
     * const exclusive = await prisma.exclusive.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExclusiveFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExclusiveFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Exclusives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exclusives
     * const exclusives = await prisma.exclusive.findMany()
     * 
     * // Get first 10 Exclusives
     * const exclusives = await prisma.exclusive.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exclusiveWithIdOnly = await prisma.exclusive.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExclusiveFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExclusiveFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Exclusive.
     * @param {ExclusiveCreateArgs} args - Arguments to create a Exclusive.
     * @example
     * // Create one Exclusive
     * const Exclusive = await prisma.exclusive.create({
     *   data: {
     *     // ... data to create a Exclusive
     *   }
     * })
     * 
    **/
    create<T extends ExclusiveCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExclusiveCreateArgs<ExtArgs>>
    ): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Exclusive.
     * @param {ExclusiveDeleteArgs} args - Arguments to delete one Exclusive.
     * @example
     * // Delete one Exclusive
     * const Exclusive = await prisma.exclusive.delete({
     *   where: {
     *     // ... filter to delete one Exclusive
     *   }
     * })
     * 
    **/
    delete<T extends ExclusiveDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExclusiveDeleteArgs<ExtArgs>>
    ): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Exclusive.
     * @param {ExclusiveUpdateArgs} args - Arguments to update one Exclusive.
     * @example
     * // Update one Exclusive
     * const exclusive = await prisma.exclusive.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExclusiveUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExclusiveUpdateArgs<ExtArgs>>
    ): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Exclusives.
     * @param {ExclusiveDeleteManyArgs} args - Arguments to filter Exclusives to delete.
     * @example
     * // Delete a few Exclusives
     * const { count } = await prisma.exclusive.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExclusiveDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExclusiveDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exclusives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exclusives
     * const exclusive = await prisma.exclusive.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExclusiveUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExclusiveUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exclusive.
     * @param {ExclusiveUpsertArgs} args - Arguments to update or create a Exclusive.
     * @example
     * // Update or create a Exclusive
     * const exclusive = await prisma.exclusive.upsert({
     *   create: {
     *     // ... data to create a Exclusive
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exclusive we want to update
     *   }
     * })
    **/
    upsert<T extends ExclusiveUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExclusiveUpsertArgs<ExtArgs>>
    ): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Exclusives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveCountArgs} args - Arguments to filter Exclusives to count.
     * @example
     * // Count the number of Exclusives
     * const count = await prisma.exclusive.count({
     *   where: {
     *     // ... the filter for the Exclusives we want to count
     *   }
     * })
    **/
    count<T extends ExclusiveCountArgs>(
      args?: Subset<T, ExclusiveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExclusiveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exclusive.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExclusiveAggregateArgs>(args: Subset<T, ExclusiveAggregateArgs>): Prisma.PrismaPromise<GetExclusiveAggregateType<T>>

    /**
     * Group by Exclusive.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExclusiveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExclusiveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExclusiveGroupByArgs['orderBy'] }
        : { orderBy?: ExclusiveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExclusiveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExclusiveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Exclusive.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExclusiveClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Car<T extends Exclusive$CarArgs<ExtArgs> = {}>(args?: Subset<T, Exclusive$CarArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Exclusive base type for findUnique actions
   */
  export type ExclusiveFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * Filter, which Exclusive to fetch.
     */
    where: ExclusiveWhereUniqueInput
  }

  /**
   * Exclusive findUnique
   */
  export interface ExclusiveFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ExclusiveFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Exclusive findUniqueOrThrow
   */
  export type ExclusiveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * Filter, which Exclusive to fetch.
     */
    where: ExclusiveWhereUniqueInput
  }


  /**
   * Exclusive base type for findFirst actions
   */
  export type ExclusiveFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * Filter, which Exclusive to fetch.
     */
    where?: ExclusiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exclusives to fetch.
     */
    orderBy?: Enumerable<ExclusiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exclusives.
     */
    cursor?: ExclusiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exclusives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exclusives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exclusives.
     */
    distinct?: Enumerable<ExclusiveScalarFieldEnum>
  }

  /**
   * Exclusive findFirst
   */
  export interface ExclusiveFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ExclusiveFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Exclusive findFirstOrThrow
   */
  export type ExclusiveFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * Filter, which Exclusive to fetch.
     */
    where?: ExclusiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exclusives to fetch.
     */
    orderBy?: Enumerable<ExclusiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exclusives.
     */
    cursor?: ExclusiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exclusives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exclusives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exclusives.
     */
    distinct?: Enumerable<ExclusiveScalarFieldEnum>
  }


  /**
   * Exclusive findMany
   */
  export type ExclusiveFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * Filter, which Exclusives to fetch.
     */
    where?: ExclusiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exclusives to fetch.
     */
    orderBy?: Enumerable<ExclusiveOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exclusives.
     */
    cursor?: ExclusiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exclusives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exclusives.
     */
    skip?: number
    distinct?: Enumerable<ExclusiveScalarFieldEnum>
  }


  /**
   * Exclusive create
   */
  export type ExclusiveCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * The data needed to create a Exclusive.
     */
    data: XOR<ExclusiveCreateInput, ExclusiveUncheckedCreateInput>
  }


  /**
   * Exclusive update
   */
  export type ExclusiveUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * The data needed to update a Exclusive.
     */
    data: XOR<ExclusiveUpdateInput, ExclusiveUncheckedUpdateInput>
    /**
     * Choose, which Exclusive to update.
     */
    where: ExclusiveWhereUniqueInput
  }


  /**
   * Exclusive updateMany
   */
  export type ExclusiveUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exclusives.
     */
    data: XOR<ExclusiveUpdateManyMutationInput, ExclusiveUncheckedUpdateManyInput>
    /**
     * Filter which Exclusives to update
     */
    where?: ExclusiveWhereInput
  }


  /**
   * Exclusive upsert
   */
  export type ExclusiveUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * The filter to search for the Exclusive to update in case it exists.
     */
    where: ExclusiveWhereUniqueInput
    /**
     * In case the Exclusive found by the `where` argument doesn't exist, create a new Exclusive with this data.
     */
    create: XOR<ExclusiveCreateInput, ExclusiveUncheckedCreateInput>
    /**
     * In case the Exclusive was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExclusiveUpdateInput, ExclusiveUncheckedUpdateInput>
  }


  /**
   * Exclusive delete
   */
  export type ExclusiveDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
    /**
     * Filter which Exclusive to delete.
     */
    where: ExclusiveWhereUniqueInput
  }


  /**
   * Exclusive deleteMany
   */
  export type ExclusiveDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exclusives to delete
     */
    where?: ExclusiveWhereInput
  }


  /**
   * Exclusive.Car
   */
  export type Exclusive$CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    cursor?: CarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Exclusive without action
   */
  export type ExclusiveArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exclusive
     */
    select?: ExclusiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExclusiveInclude<ExtArgs> | null
  }



  /**
   * Model Car
   */


  export type AggregateCar = {
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  export type CarAvgAggregateOutputType = {
    id: number | null
    manufactureId: number | null
    yearId: number | null
    year_number: number | null
    colorId: number | null
    treasure_huntId: number | null
    companyId: number | null
    exclusiveId: number | null
    price_buy: number | null
    price_sell: number | null
  }

  export type CarSumAggregateOutputType = {
    id: number | null
    manufactureId: number | null
    yearId: number | null
    year_number: number | null
    colorId: number | null
    treasure_huntId: number | null
    companyId: number | null
    exclusiveId: number | null
    price_buy: number | null
    price_sell: number | null
  }

  export type CarMinAggregateOutputType = {
    id: number | null
    manufactureId: number | null
    code: string | null
    yearId: number | null
    year_number: number | null
    colorId: number | null
    color_wikia: string | null
    rubber: boolean | null
    custom: boolean | null
    treasure_huntId: number | null
    new_model: boolean | null
    companyId: number | null
    exclusiveId: number | null
    type: string | null
    loose: boolean | null
    price_buy: number | null
    price_sell: number | null
    sell: boolean | null
  }

  export type CarMaxAggregateOutputType = {
    id: number | null
    manufactureId: number | null
    code: string | null
    yearId: number | null
    year_number: number | null
    colorId: number | null
    color_wikia: string | null
    rubber: boolean | null
    custom: boolean | null
    treasure_huntId: number | null
    new_model: boolean | null
    companyId: number | null
    exclusiveId: number | null
    type: string | null
    loose: boolean | null
    price_buy: number | null
    price_sell: number | null
    sell: boolean | null
  }

  export type CarCountAggregateOutputType = {
    id: number
    manufactureId: number
    code: number
    yearId: number
    year_number: number
    colorId: number
    color_wikia: number
    rubber: number
    custom: number
    treasure_huntId: number
    new_model: number
    companyId: number
    exclusiveId: number
    type: number
    loose: number
    price_buy: number
    price_sell: number
    sell: number
    _all: number
  }


  export type CarAvgAggregateInputType = {
    id?: true
    manufactureId?: true
    yearId?: true
    year_number?: true
    colorId?: true
    treasure_huntId?: true
    companyId?: true
    exclusiveId?: true
    price_buy?: true
    price_sell?: true
  }

  export type CarSumAggregateInputType = {
    id?: true
    manufactureId?: true
    yearId?: true
    year_number?: true
    colorId?: true
    treasure_huntId?: true
    companyId?: true
    exclusiveId?: true
    price_buy?: true
    price_sell?: true
  }

  export type CarMinAggregateInputType = {
    id?: true
    manufactureId?: true
    code?: true
    yearId?: true
    year_number?: true
    colorId?: true
    color_wikia?: true
    rubber?: true
    custom?: true
    treasure_huntId?: true
    new_model?: true
    companyId?: true
    exclusiveId?: true
    type?: true
    loose?: true
    price_buy?: true
    price_sell?: true
    sell?: true
  }

  export type CarMaxAggregateInputType = {
    id?: true
    manufactureId?: true
    code?: true
    yearId?: true
    year_number?: true
    colorId?: true
    color_wikia?: true
    rubber?: true
    custom?: true
    treasure_huntId?: true
    new_model?: true
    companyId?: true
    exclusiveId?: true
    type?: true
    loose?: true
    price_buy?: true
    price_sell?: true
    sell?: true
  }

  export type CarCountAggregateInputType = {
    id?: true
    manufactureId?: true
    code?: true
    yearId?: true
    year_number?: true
    colorId?: true
    color_wikia?: true
    rubber?: true
    custom?: true
    treasure_huntId?: true
    new_model?: true
    companyId?: true
    exclusiveId?: true
    type?: true
    loose?: true
    price_buy?: true
    price_sell?: true
    sell?: true
    _all?: true
  }

  export type CarAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Car to aggregate.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cars
    **/
    _count?: true | CarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarMaxAggregateInputType
  }

  export type GetCarAggregateType<T extends CarAggregateArgs> = {
        [P in keyof T & keyof AggregateCar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCar[P]>
      : GetScalarType<T[P], AggregateCar[P]>
  }




  export type CarGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CarWhereInput
    orderBy?: Enumerable<CarOrderByWithAggregationInput>
    by: CarScalarFieldEnum[]
    having?: CarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarCountAggregateInputType | true
    _avg?: CarAvgAggregateInputType
    _sum?: CarSumAggregateInputType
    _min?: CarMinAggregateInputType
    _max?: CarMaxAggregateInputType
  }


  export type CarGroupByOutputType = {
    id: number
    manufactureId: number
    code: string | null
    yearId: number
    year_number: number | null
    colorId: number
    color_wikia: string | null
    rubber: boolean
    custom: boolean
    treasure_huntId: number
    new_model: boolean
    companyId: number
    exclusiveId: number
    type: string | null
    loose: boolean
    price_buy: number | null
    price_sell: number | null
    sell: boolean
    _count: CarCountAggregateOutputType | null
    _avg: CarAvgAggregateOutputType | null
    _sum: CarSumAggregateOutputType | null
    _min: CarMinAggregateOutputType | null
    _max: CarMaxAggregateOutputType | null
  }

  type GetCarGroupByPayload<T extends CarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarGroupByOutputType[P]>
            : GetScalarType<T[P], CarGroupByOutputType[P]>
        }
      >
    >


  export type CarSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    manufactureId?: boolean
    code?: boolean
    yearId?: boolean
    year_number?: boolean
    colorId?: boolean
    color_wikia?: boolean
    rubber?: boolean
    custom?: boolean
    treasure_huntId?: boolean
    new_model?: boolean
    companyId?: boolean
    exclusiveId?: boolean
    type?: boolean
    loose?: boolean
    price_buy?: boolean
    price_sell?: boolean
    sell?: boolean
    User_car?: boolean | Car$User_carArgs<ExtArgs>
    manufacture?: boolean | ManufacturerArgs<ExtArgs>
    color?: boolean | ColorsArgs<ExtArgs>
    year?: boolean | YearArgs<ExtArgs>
    treasureHunt?: boolean | TreasureHuntArgs<ExtArgs>
    company?: boolean | CompanyArgs<ExtArgs>
    exclusive?: boolean | ExclusiveArgs<ExtArgs>
    _count?: boolean | CarCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["car"]>

  export type CarSelectScalar = {
    id?: boolean
    manufactureId?: boolean
    code?: boolean
    yearId?: boolean
    year_number?: boolean
    colorId?: boolean
    color_wikia?: boolean
    rubber?: boolean
    custom?: boolean
    treasure_huntId?: boolean
    new_model?: boolean
    companyId?: boolean
    exclusiveId?: boolean
    type?: boolean
    loose?: boolean
    price_buy?: boolean
    price_sell?: boolean
    sell?: boolean
  }

  export type CarInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User_car?: boolean | Car$User_carArgs<ExtArgs>
    manufacture?: boolean | ManufacturerArgs<ExtArgs>
    color?: boolean | ColorsArgs<ExtArgs>
    year?: boolean | YearArgs<ExtArgs>
    treasureHunt?: boolean | TreasureHuntArgs<ExtArgs>
    company?: boolean | CompanyArgs<ExtArgs>
    exclusive?: boolean | ExclusiveArgs<ExtArgs>
    _count?: boolean | CarCountOutputTypeArgs<ExtArgs>
  }


  type CarGetPayload<S extends boolean | null | undefined | CarArgs> = $Types.GetResult<CarPayload, S>

  type CarCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CarFindManyArgs, 'select' | 'include'> & {
      select?: CarCountAggregateInputType | true
    }

  export interface CarDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Car'], meta: { name: 'Car' } }
    /**
     * Find zero or one Car that matches the filter.
     * @param {CarFindUniqueArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Car'> extends True ? Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Car that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarFindUniqueOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Car that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Car'> extends True ? Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Car that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindFirstOrThrowArgs} args - Arguments to find a Car
     * @example
     * // Get one Car
     * const car = await prisma.car.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.car.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.car.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carWithIdOnly = await prisma.car.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CarPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Car.
     * @param {CarCreateArgs} args - Arguments to create a Car.
     * @example
     * // Create one Car
     * const Car = await prisma.car.create({
     *   data: {
     *     // ... data to create a Car
     *   }
     * })
     * 
    **/
    create<T extends CarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarCreateArgs<ExtArgs>>
    ): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Car.
     * @param {CarDeleteArgs} args - Arguments to delete one Car.
     * @example
     * // Delete one Car
     * const Car = await prisma.car.delete({
     *   where: {
     *     // ... filter to delete one Car
     *   }
     * })
     * 
    **/
    delete<T extends CarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarDeleteArgs<ExtArgs>>
    ): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Car.
     * @param {CarUpdateArgs} args - Arguments to update one Car.
     * @example
     * // Update one Car
     * const car = await prisma.car.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarUpdateArgs<ExtArgs>>
    ): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Cars.
     * @param {CarDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.car.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const car = await prisma.car.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Car.
     * @param {CarUpsertArgs} args - Arguments to update or create a Car.
     * @example
     * // Update or create a Car
     * const car = await prisma.car.upsert({
     *   create: {
     *     // ... data to create a Car
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Car we want to update
     *   }
     * })
    **/
    upsert<T extends CarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarUpsertArgs<ExtArgs>>
    ): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.car.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends CarCountArgs>(
      args?: Subset<T, CarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarAggregateArgs>(args: Subset<T, CarAggregateArgs>): Prisma.PrismaPromise<GetCarAggregateType<T>>

    /**
     * Group by Car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarGroupByArgs['orderBy'] }
        : { orderBy?: CarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Car.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User_car<T extends Car$User_carArgs<ExtArgs> = {}>(args?: Subset<T, Car$User_carArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findMany', never>| Null>;

    manufacture<T extends ManufacturerArgs<ExtArgs> = {}>(args?: Subset<T, ManufacturerArgs<ExtArgs>>): Prisma__ManufacturerClient<$Types.GetResult<ManufacturerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    color<T extends ColorsArgs<ExtArgs> = {}>(args?: Subset<T, ColorsArgs<ExtArgs>>): Prisma__ColorsClient<$Types.GetResult<ColorsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    year<T extends YearArgs<ExtArgs> = {}>(args?: Subset<T, YearArgs<ExtArgs>>): Prisma__YearClient<$Types.GetResult<YearPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    treasureHunt<T extends TreasureHuntArgs<ExtArgs> = {}>(args?: Subset<T, TreasureHuntArgs<ExtArgs>>): Prisma__TreasureHuntClient<$Types.GetResult<TreasureHuntPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    company<T extends CompanyArgs<ExtArgs> = {}>(args?: Subset<T, CompanyArgs<ExtArgs>>): Prisma__CompanyClient<$Types.GetResult<CompanyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    exclusive<T extends ExclusiveArgs<ExtArgs> = {}>(args?: Subset<T, ExclusiveArgs<ExtArgs>>): Prisma__ExclusiveClient<$Types.GetResult<ExclusivePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Car base type for findUnique actions
   */
  export type CarFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where: CarWhereUniqueInput
  }

  /**
   * Car findUnique
   */
  export interface CarFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Car findUniqueOrThrow
   */
  export type CarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where: CarWhereUniqueInput
  }


  /**
   * Car base type for findFirst actions
   */
  export type CarFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     */
    distinct?: Enumerable<CarScalarFieldEnum>
  }

  /**
   * Car findFirst
   */
  export interface CarFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CarFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Car findFirstOrThrow
   */
  export type CarFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Car to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cars.
     */
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Car findMany
   */
  export type CarFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter, which Cars to fetch.
     */
    where?: CarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cars to fetch.
     */
    orderBy?: Enumerable<CarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cars.
     */
    cursor?: CarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cars.
     */
    skip?: number
    distinct?: Enumerable<CarScalarFieldEnum>
  }


  /**
   * Car create
   */
  export type CarCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The data needed to create a Car.
     */
    data: XOR<CarCreateInput, CarUncheckedCreateInput>
  }


  /**
   * Car update
   */
  export type CarUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The data needed to update a Car.
     */
    data: XOR<CarUpdateInput, CarUncheckedUpdateInput>
    /**
     * Choose, which Car to update.
     */
    where: CarWhereUniqueInput
  }


  /**
   * Car updateMany
   */
  export type CarUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cars.
     */
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyInput>
    /**
     * Filter which Cars to update
     */
    where?: CarWhereInput
  }


  /**
   * Car upsert
   */
  export type CarUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * The filter to search for the Car to update in case it exists.
     */
    where: CarWhereUniqueInput
    /**
     * In case the Car found by the `where` argument doesn't exist, create a new Car with this data.
     */
    create: XOR<CarCreateInput, CarUncheckedCreateInput>
    /**
     * In case the Car was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarUpdateInput, CarUncheckedUpdateInput>
  }


  /**
   * Car delete
   */
  export type CarDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
    /**
     * Filter which Car to delete.
     */
    where: CarWhereUniqueInput
  }


  /**
   * Car deleteMany
   */
  export type CarDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cars to delete
     */
    where?: CarWhereInput
  }


  /**
   * Car.User_car
   */
  export type Car$User_carArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    where?: User_carWhereInput
    orderBy?: Enumerable<User_carOrderByWithRelationInput>
    cursor?: User_carWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<User_carScalarFieldEnum>
  }


  /**
   * Car without action
   */
  export type CarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Car
     */
    select?: CarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarInclude<ExtArgs> | null
  }



  /**
   * Model User_car
   */


  export type AggregateUser_car = {
    _count: User_carCountAggregateOutputType | null
    _avg: User_carAvgAggregateOutputType | null
    _sum: User_carSumAggregateOutputType | null
    _min: User_carMinAggregateOutputType | null
    _max: User_carMaxAggregateOutputType | null
  }

  export type User_carAvgAggregateOutputType = {
    id: number | null
    carId: number | null
  }

  export type User_carSumAggregateOutputType = {
    id: number | null
    carId: number | null
  }

  export type User_carMinAggregateOutputType = {
    id: number | null
    userId: string | null
    carId: number | null
  }

  export type User_carMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    carId: number | null
  }

  export type User_carCountAggregateOutputType = {
    id: number
    userId: number
    carId: number
    _all: number
  }


  export type User_carAvgAggregateInputType = {
    id?: true
    carId?: true
  }

  export type User_carSumAggregateInputType = {
    id?: true
    carId?: true
  }

  export type User_carMinAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
  }

  export type User_carMaxAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
  }

  export type User_carCountAggregateInputType = {
    id?: true
    userId?: true
    carId?: true
    _all?: true
  }

  export type User_carAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User_car to aggregate.
     */
    where?: User_carWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_cars to fetch.
     */
    orderBy?: Enumerable<User_carOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: User_carWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned User_cars
    **/
    _count?: true | User_carCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_carAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_carSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_carMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_carMaxAggregateInputType
  }

  export type GetUser_carAggregateType<T extends User_carAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_car]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_car[P]>
      : GetScalarType<T[P], AggregateUser_car[P]>
  }




  export type User_carGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: User_carWhereInput
    orderBy?: Enumerable<User_carOrderByWithAggregationInput>
    by: User_carScalarFieldEnum[]
    having?: User_carScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_carCountAggregateInputType | true
    _avg?: User_carAvgAggregateInputType
    _sum?: User_carSumAggregateInputType
    _min?: User_carMinAggregateInputType
    _max?: User_carMaxAggregateInputType
  }


  export type User_carGroupByOutputType = {
    id: number
    userId: string
    carId: number
    _count: User_carCountAggregateOutputType | null
    _avg: User_carAvgAggregateOutputType | null
    _sum: User_carSumAggregateOutputType | null
    _min: User_carMinAggregateOutputType | null
    _max: User_carMaxAggregateOutputType | null
  }

  type GetUser_carGroupByPayload<T extends User_carGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<User_carGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_carGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_carGroupByOutputType[P]>
            : GetScalarType<T[P], User_carGroupByOutputType[P]>
        }
      >
    >


  export type User_carSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    carId?: boolean
    user_id?: boolean | UserArgs<ExtArgs>
    car_id?: boolean | CarArgs<ExtArgs>
  }, ExtArgs["result"]["user_car"]>

  export type User_carSelectScalar = {
    id?: boolean
    userId?: boolean
    carId?: boolean
  }

  export type User_carInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user_id?: boolean | UserArgs<ExtArgs>
    car_id?: boolean | CarArgs<ExtArgs>
  }


  type User_carGetPayload<S extends boolean | null | undefined | User_carArgs> = $Types.GetResult<User_carPayload, S>

  type User_carCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<User_carFindManyArgs, 'select' | 'include'> & {
      select?: User_carCountAggregateInputType | true
    }

  export interface User_carDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User_car'], meta: { name: 'User_car' } }
    /**
     * Find zero or one User_car that matches the filter.
     * @param {User_carFindUniqueArgs} args - Arguments to find a User_car
     * @example
     * // Get one User_car
     * const user_car = await prisma.user_car.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends User_carFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, User_carFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User_car'> extends True ? Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User_car that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {User_carFindUniqueOrThrowArgs} args - Arguments to find a User_car
     * @example
     * // Get one User_car
     * const user_car = await prisma.user_car.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends User_carFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, User_carFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User_car that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carFindFirstArgs} args - Arguments to find a User_car
     * @example
     * // Get one User_car
     * const user_car = await prisma.user_car.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends User_carFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, User_carFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User_car'> extends True ? Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User_car that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carFindFirstOrThrowArgs} args - Arguments to find a User_car
     * @example
     * // Get one User_car
     * const user_car = await prisma.user_car.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends User_carFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, User_carFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more User_cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_cars
     * const user_cars = await prisma.user_car.findMany()
     * 
     * // Get first 10 User_cars
     * const user_cars = await prisma.user_car.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_carWithIdOnly = await prisma.user_car.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends User_carFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, User_carFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<User_carPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User_car.
     * @param {User_carCreateArgs} args - Arguments to create a User_car.
     * @example
     * // Create one User_car
     * const User_car = await prisma.user_car.create({
     *   data: {
     *     // ... data to create a User_car
     *   }
     * })
     * 
    **/
    create<T extends User_carCreateArgs<ExtArgs>>(
      args: SelectSubset<T, User_carCreateArgs<ExtArgs>>
    ): Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a User_car.
     * @param {User_carDeleteArgs} args - Arguments to delete one User_car.
     * @example
     * // Delete one User_car
     * const User_car = await prisma.user_car.delete({
     *   where: {
     *     // ... filter to delete one User_car
     *   }
     * })
     * 
    **/
    delete<T extends User_carDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, User_carDeleteArgs<ExtArgs>>
    ): Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User_car.
     * @param {User_carUpdateArgs} args - Arguments to update one User_car.
     * @example
     * // Update one User_car
     * const user_car = await prisma.user_car.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends User_carUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, User_carUpdateArgs<ExtArgs>>
    ): Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more User_cars.
     * @param {User_carDeleteManyArgs} args - Arguments to filter User_cars to delete.
     * @example
     * // Delete a few User_cars
     * const { count } = await prisma.user_car.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends User_carDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, User_carDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_cars
     * const user_car = await prisma.user_car.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends User_carUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, User_carUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_car.
     * @param {User_carUpsertArgs} args - Arguments to update or create a User_car.
     * @example
     * // Update or create a User_car
     * const user_car = await prisma.user_car.upsert({
     *   create: {
     *     // ... data to create a User_car
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_car we want to update
     *   }
     * })
    **/
    upsert<T extends User_carUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, User_carUpsertArgs<ExtArgs>>
    ): Prisma__User_carClient<$Types.GetResult<User_carPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of User_cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carCountArgs} args - Arguments to filter User_cars to count.
     * @example
     * // Count the number of User_cars
     * const count = await prisma.user_car.count({
     *   where: {
     *     // ... the filter for the User_cars we want to count
     *   }
     * })
    **/
    count<T extends User_carCountArgs>(
      args?: Subset<T, User_carCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_carCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_carAggregateArgs>(args: Subset<T, User_carAggregateArgs>): Prisma.PrismaPromise<GetUser_carAggregateType<T>>

    /**
     * Group by User_car.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_carGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_carGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_carGroupByArgs['orderBy'] }
        : { orderBy?: User_carGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_carGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_carGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User_car.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__User_carClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user_id<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    car_id<T extends CarArgs<ExtArgs> = {}>(args?: Subset<T, CarArgs<ExtArgs>>): Prisma__CarClient<$Types.GetResult<CarPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User_car base type for findUnique actions
   */
  export type User_carFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * Filter, which User_car to fetch.
     */
    where: User_carWhereUniqueInput
  }

  /**
   * User_car findUnique
   */
  export interface User_carFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends User_carFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User_car findUniqueOrThrow
   */
  export type User_carFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * Filter, which User_car to fetch.
     */
    where: User_carWhereUniqueInput
  }


  /**
   * User_car base type for findFirst actions
   */
  export type User_carFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * Filter, which User_car to fetch.
     */
    where?: User_carWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_cars to fetch.
     */
    orderBy?: Enumerable<User_carOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_cars.
     */
    cursor?: User_carWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_cars.
     */
    distinct?: Enumerable<User_carScalarFieldEnum>
  }

  /**
   * User_car findFirst
   */
  export interface User_carFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends User_carFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User_car findFirstOrThrow
   */
  export type User_carFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * Filter, which User_car to fetch.
     */
    where?: User_carWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_cars to fetch.
     */
    orderBy?: Enumerable<User_carOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_cars.
     */
    cursor?: User_carWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_cars.
     */
    distinct?: Enumerable<User_carScalarFieldEnum>
  }


  /**
   * User_car findMany
   */
  export type User_carFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * Filter, which User_cars to fetch.
     */
    where?: User_carWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_cars to fetch.
     */
    orderBy?: Enumerable<User_carOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing User_cars.
     */
    cursor?: User_carWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_cars.
     */
    skip?: number
    distinct?: Enumerable<User_carScalarFieldEnum>
  }


  /**
   * User_car create
   */
  export type User_carCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * The data needed to create a User_car.
     */
    data: XOR<User_carCreateInput, User_carUncheckedCreateInput>
  }


  /**
   * User_car update
   */
  export type User_carUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * The data needed to update a User_car.
     */
    data: XOR<User_carUpdateInput, User_carUncheckedUpdateInput>
    /**
     * Choose, which User_car to update.
     */
    where: User_carWhereUniqueInput
  }


  /**
   * User_car updateMany
   */
  export type User_carUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update User_cars.
     */
    data: XOR<User_carUpdateManyMutationInput, User_carUncheckedUpdateManyInput>
    /**
     * Filter which User_cars to update
     */
    where?: User_carWhereInput
  }


  /**
   * User_car upsert
   */
  export type User_carUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * The filter to search for the User_car to update in case it exists.
     */
    where: User_carWhereUniqueInput
    /**
     * In case the User_car found by the `where` argument doesn't exist, create a new User_car with this data.
     */
    create: XOR<User_carCreateInput, User_carUncheckedCreateInput>
    /**
     * In case the User_car was found with the provided `where` argument, update it with this data.
     */
    update: XOR<User_carUpdateInput, User_carUncheckedUpdateInput>
  }


  /**
   * User_car delete
   */
  export type User_carDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
    /**
     * Filter which User_car to delete.
     */
    where: User_carWhereUniqueInput
  }


  /**
   * User_car deleteMany
   */
  export type User_carDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User_cars to delete
     */
    where?: User_carWhereInput
  }


  /**
   * User_car without action
   */
  export type User_carArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_car
     */
    select?: User_carSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_carInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ManufacturerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    country: 'country',
    flag: 'flag',
    photo: 'photo'
  };

  export type ManufacturerScalarFieldEnum = (typeof ManufacturerScalarFieldEnum)[keyof typeof ManufacturerScalarFieldEnum]


  export const YearScalarFieldEnum: {
    id: 'id',
    year: 'year',
    total: 'total'
  };

  export type YearScalarFieldEnum = (typeof YearScalarFieldEnum)[keyof typeof YearScalarFieldEnum]


  export const ColorsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    hex: 'hex'
  };

  export type ColorsScalarFieldEnum = (typeof ColorsScalarFieldEnum)[keyof typeof ColorsScalarFieldEnum]


  export const TreasureHuntScalarFieldEnum: {
    id: 'id',
    letter: 'letter',
    name: 'name'
  };

  export type TreasureHuntScalarFieldEnum = (typeof TreasureHuntScalarFieldEnum)[keyof typeof TreasureHuntScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    photo: 'photo'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const ExclusiveScalarFieldEnum: {
    id: 'id',
    letter: 'letter',
    name: 'name',
    photo: 'photo'
  };

  export type ExclusiveScalarFieldEnum = (typeof ExclusiveScalarFieldEnum)[keyof typeof ExclusiveScalarFieldEnum]


  export const CarScalarFieldEnum: {
    id: 'id',
    manufactureId: 'manufactureId',
    code: 'code',
    yearId: 'yearId',
    year_number: 'year_number',
    colorId: 'colorId',
    color_wikia: 'color_wikia',
    rubber: 'rubber',
    custom: 'custom',
    treasure_huntId: 'treasure_huntId',
    new_model: 'new_model',
    companyId: 'companyId',
    exclusiveId: 'exclusiveId',
    type: 'type',
    loose: 'loose',
    price_buy: 'price_buy',
    price_sell: 'price_sell',
    sell: 'sell'
  };

  export type CarScalarFieldEnum = (typeof CarScalarFieldEnum)[keyof typeof CarScalarFieldEnum]


  export const User_carScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    carId: 'carId'
  };

  export type User_carScalarFieldEnum = (typeof User_carScalarFieldEnum)[keyof typeof User_carScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    User_car?: User_carListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    User_car?: User_carOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ManufacturerWhereInput = {
    AND?: Enumerable<ManufacturerWhereInput>
    OR?: Enumerable<ManufacturerWhereInput>
    NOT?: Enumerable<ManufacturerWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    country?: StringNullableFilter | string | null
    flag?: StringNullableFilter | string | null
    photo?: StringNullableFilter | string | null
    Car?: CarListRelationFilter
  }

  export type ManufacturerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrderInput | SortOrder
    flag?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    Car?: CarOrderByRelationAggregateInput
  }

  export type ManufacturerWhereUniqueInput = {
    id?: number
  }

  export type ManufacturerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrderInput | SortOrder
    flag?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    _count?: ManufacturerCountOrderByAggregateInput
    _avg?: ManufacturerAvgOrderByAggregateInput
    _max?: ManufacturerMaxOrderByAggregateInput
    _min?: ManufacturerMinOrderByAggregateInput
    _sum?: ManufacturerSumOrderByAggregateInput
  }

  export type ManufacturerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ManufacturerScalarWhereWithAggregatesInput>
    OR?: Enumerable<ManufacturerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ManufacturerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    country?: StringNullableWithAggregatesFilter | string | null
    flag?: StringNullableWithAggregatesFilter | string | null
    photo?: StringNullableWithAggregatesFilter | string | null
  }

  export type YearWhereInput = {
    AND?: Enumerable<YearWhereInput>
    OR?: Enumerable<YearWhereInput>
    NOT?: Enumerable<YearWhereInput>
    id?: IntFilter | number
    year?: IntFilter | number
    total?: IntNullableFilter | number | null
    Car?: CarListRelationFilter
  }

  export type YearOrderByWithRelationInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrderInput | SortOrder
    Car?: CarOrderByRelationAggregateInput
  }

  export type YearWhereUniqueInput = {
    id?: number
  }

  export type YearOrderByWithAggregationInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrderInput | SortOrder
    _count?: YearCountOrderByAggregateInput
    _avg?: YearAvgOrderByAggregateInput
    _max?: YearMaxOrderByAggregateInput
    _min?: YearMinOrderByAggregateInput
    _sum?: YearSumOrderByAggregateInput
  }

  export type YearScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YearScalarWhereWithAggregatesInput>
    OR?: Enumerable<YearScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YearScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    year?: IntWithAggregatesFilter | number
    total?: IntNullableWithAggregatesFilter | number | null
  }

  export type ColorsWhereInput = {
    AND?: Enumerable<ColorsWhereInput>
    OR?: Enumerable<ColorsWhereInput>
    NOT?: Enumerable<ColorsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    hex?: StringFilter | string
    Car?: CarListRelationFilter
  }

  export type ColorsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    hex?: SortOrder
    Car?: CarOrderByRelationAggregateInput
  }

  export type ColorsWhereUniqueInput = {
    id?: number
  }

  export type ColorsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    hex?: SortOrder
    _count?: ColorsCountOrderByAggregateInput
    _avg?: ColorsAvgOrderByAggregateInput
    _max?: ColorsMaxOrderByAggregateInput
    _min?: ColorsMinOrderByAggregateInput
    _sum?: ColorsSumOrderByAggregateInput
  }

  export type ColorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ColorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ColorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ColorsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    hex?: StringWithAggregatesFilter | string
  }

  export type TreasureHuntWhereInput = {
    AND?: Enumerable<TreasureHuntWhereInput>
    OR?: Enumerable<TreasureHuntWhereInput>
    NOT?: Enumerable<TreasureHuntWhereInput>
    id?: IntFilter | number
    letter?: StringFilter | string
    name?: StringFilter | string
    Car?: CarListRelationFilter
  }

  export type TreasureHuntOrderByWithRelationInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    Car?: CarOrderByRelationAggregateInput
  }

  export type TreasureHuntWhereUniqueInput = {
    id?: number
  }

  export type TreasureHuntOrderByWithAggregationInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    _count?: TreasureHuntCountOrderByAggregateInput
    _avg?: TreasureHuntAvgOrderByAggregateInput
    _max?: TreasureHuntMaxOrderByAggregateInput
    _min?: TreasureHuntMinOrderByAggregateInput
    _sum?: TreasureHuntSumOrderByAggregateInput
  }

  export type TreasureHuntScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TreasureHuntScalarWhereWithAggregatesInput>
    OR?: Enumerable<TreasureHuntScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TreasureHuntScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    letter?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
  }

  export type CompanyWhereInput = {
    AND?: Enumerable<CompanyWhereInput>
    OR?: Enumerable<CompanyWhereInput>
    NOT?: Enumerable<CompanyWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    photo?: StringNullableFilter | string | null
    Car?: CarListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    photo?: SortOrderInput | SortOrder
    Car?: CarOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = {
    id?: number
  }

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    photo?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    photo?: StringNullableWithAggregatesFilter | string | null
  }

  export type ExclusiveWhereInput = {
    AND?: Enumerable<ExclusiveWhereInput>
    OR?: Enumerable<ExclusiveWhereInput>
    NOT?: Enumerable<ExclusiveWhereInput>
    id?: IntFilter | number
    letter?: StringFilter | string
    name?: StringFilter | string
    photo?: StringNullableFilter | string | null
    Car?: CarListRelationFilter
  }

  export type ExclusiveOrderByWithRelationInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    photo?: SortOrderInput | SortOrder
    Car?: CarOrderByRelationAggregateInput
  }

  export type ExclusiveWhereUniqueInput = {
    id?: number
  }

  export type ExclusiveOrderByWithAggregationInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    photo?: SortOrderInput | SortOrder
    _count?: ExclusiveCountOrderByAggregateInput
    _avg?: ExclusiveAvgOrderByAggregateInput
    _max?: ExclusiveMaxOrderByAggregateInput
    _min?: ExclusiveMinOrderByAggregateInput
    _sum?: ExclusiveSumOrderByAggregateInput
  }

  export type ExclusiveScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExclusiveScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExclusiveScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExclusiveScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    letter?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    photo?: StringNullableWithAggregatesFilter | string | null
  }

  export type CarWhereInput = {
    AND?: Enumerable<CarWhereInput>
    OR?: Enumerable<CarWhereInput>
    NOT?: Enumerable<CarWhereInput>
    id?: IntFilter | number
    manufactureId?: IntFilter | number
    code?: StringNullableFilter | string | null
    yearId?: IntFilter | number
    year_number?: IntNullableFilter | number | null
    colorId?: IntFilter | number
    color_wikia?: StringNullableFilter | string | null
    rubber?: BoolFilter | boolean
    custom?: BoolFilter | boolean
    treasure_huntId?: IntFilter | number
    new_model?: BoolFilter | boolean
    companyId?: IntFilter | number
    exclusiveId?: IntFilter | number
    type?: StringNullableFilter | string | null
    loose?: BoolFilter | boolean
    price_buy?: FloatNullableFilter | number | null
    price_sell?: FloatNullableFilter | number | null
    sell?: BoolFilter | boolean
    User_car?: User_carListRelationFilter
    manufacture?: XOR<ManufacturerRelationFilter, ManufacturerWhereInput>
    color?: XOR<ColorsRelationFilter, ColorsWhereInput>
    year?: XOR<YearRelationFilter, YearWhereInput>
    treasureHunt?: XOR<TreasureHuntRelationFilter, TreasureHuntWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    exclusive?: XOR<ExclusiveRelationFilter, ExclusiveWhereInput>
  }

  export type CarOrderByWithRelationInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    code?: SortOrderInput | SortOrder
    yearId?: SortOrder
    year_number?: SortOrderInput | SortOrder
    colorId?: SortOrder
    color_wikia?: SortOrderInput | SortOrder
    rubber?: SortOrder
    custom?: SortOrder
    treasure_huntId?: SortOrder
    new_model?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    type?: SortOrderInput | SortOrder
    loose?: SortOrder
    price_buy?: SortOrderInput | SortOrder
    price_sell?: SortOrderInput | SortOrder
    sell?: SortOrder
    User_car?: User_carOrderByRelationAggregateInput
    manufacture?: ManufacturerOrderByWithRelationInput
    color?: ColorsOrderByWithRelationInput
    year?: YearOrderByWithRelationInput
    treasureHunt?: TreasureHuntOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    exclusive?: ExclusiveOrderByWithRelationInput
  }

  export type CarWhereUniqueInput = {
    id?: number
  }

  export type CarOrderByWithAggregationInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    code?: SortOrderInput | SortOrder
    yearId?: SortOrder
    year_number?: SortOrderInput | SortOrder
    colorId?: SortOrder
    color_wikia?: SortOrderInput | SortOrder
    rubber?: SortOrder
    custom?: SortOrder
    treasure_huntId?: SortOrder
    new_model?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    type?: SortOrderInput | SortOrder
    loose?: SortOrder
    price_buy?: SortOrderInput | SortOrder
    price_sell?: SortOrderInput | SortOrder
    sell?: SortOrder
    _count?: CarCountOrderByAggregateInput
    _avg?: CarAvgOrderByAggregateInput
    _max?: CarMaxOrderByAggregateInput
    _min?: CarMinOrderByAggregateInput
    _sum?: CarSumOrderByAggregateInput
  }

  export type CarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    manufactureId?: IntWithAggregatesFilter | number
    code?: StringNullableWithAggregatesFilter | string | null
    yearId?: IntWithAggregatesFilter | number
    year_number?: IntNullableWithAggregatesFilter | number | null
    colorId?: IntWithAggregatesFilter | number
    color_wikia?: StringNullableWithAggregatesFilter | string | null
    rubber?: BoolWithAggregatesFilter | boolean
    custom?: BoolWithAggregatesFilter | boolean
    treasure_huntId?: IntWithAggregatesFilter | number
    new_model?: BoolWithAggregatesFilter | boolean
    companyId?: IntWithAggregatesFilter | number
    exclusiveId?: IntWithAggregatesFilter | number
    type?: StringNullableWithAggregatesFilter | string | null
    loose?: BoolWithAggregatesFilter | boolean
    price_buy?: FloatNullableWithAggregatesFilter | number | null
    price_sell?: FloatNullableWithAggregatesFilter | number | null
    sell?: BoolWithAggregatesFilter | boolean
  }

  export type User_carWhereInput = {
    AND?: Enumerable<User_carWhereInput>
    OR?: Enumerable<User_carWhereInput>
    NOT?: Enumerable<User_carWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    carId?: IntFilter | number
    user_id?: XOR<UserRelationFilter, UserWhereInput>
    car_id?: XOR<CarRelationFilter, CarWhereInput>
  }

  export type User_carOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    user_id?: UserOrderByWithRelationInput
    car_id?: CarOrderByWithRelationInput
  }

  export type User_carWhereUniqueInput = {
    id?: number
  }

  export type User_carOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
    _count?: User_carCountOrderByAggregateInput
    _avg?: User_carAvgOrderByAggregateInput
    _max?: User_carMaxOrderByAggregateInput
    _min?: User_carMinOrderByAggregateInput
    _sum?: User_carSumOrderByAggregateInput
  }

  export type User_carScalarWhereWithAggregatesInput = {
    AND?: Enumerable<User_carScalarWhereWithAggregatesInput>
    OR?: Enumerable<User_carScalarWhereWithAggregatesInput>
    NOT?: Enumerable<User_carScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    carId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    createdAt?: Date | string
    User_car?: User_carCreateNestedManyWithoutUser_idInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    createdAt?: Date | string
    User_car?: User_carUncheckedCreateNestedManyWithoutUser_idInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User_car?: User_carUpdateManyWithoutUser_idNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User_car?: User_carUncheckedUpdateManyWithoutUser_idNestedInput
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManufacturerCreateInput = {
    name: string
    country?: string | null
    flag?: string | null
    photo?: string | null
    Car?: CarCreateNestedManyWithoutManufactureInput
  }

  export type ManufacturerUncheckedCreateInput = {
    id?: number
    name: string
    country?: string | null
    flag?: string | null
    photo?: string | null
    Car?: CarUncheckedCreateNestedManyWithoutManufactureInput
  }

  export type ManufacturerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    Car?: CarUpdateManyWithoutManufactureNestedInput
  }

  export type ManufacturerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    Car?: CarUncheckedUpdateManyWithoutManufactureNestedInput
  }

  export type ManufacturerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManufacturerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type YearCreateInput = {
    year: number
    total?: number | null
    Car?: CarCreateNestedManyWithoutYearInput
  }

  export type YearUncheckedCreateInput = {
    id?: number
    year: number
    total?: number | null
    Car?: CarUncheckedCreateNestedManyWithoutYearInput
  }

  export type YearUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    total?: NullableIntFieldUpdateOperationsInput | number | null
    Car?: CarUpdateManyWithoutYearNestedInput
  }

  export type YearUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total?: NullableIntFieldUpdateOperationsInput | number | null
    Car?: CarUncheckedUpdateManyWithoutYearNestedInput
  }

  export type YearUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    total?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type YearUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ColorsCreateInput = {
    name: string
    hex: string
    Car?: CarCreateNestedManyWithoutColorInput
  }

  export type ColorsUncheckedCreateInput = {
    id?: number
    name: string
    hex: string
    Car?: CarUncheckedCreateNestedManyWithoutColorInput
  }

  export type ColorsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    hex?: StringFieldUpdateOperationsInput | string
    Car?: CarUpdateManyWithoutColorNestedInput
  }

  export type ColorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    hex?: StringFieldUpdateOperationsInput | string
    Car?: CarUncheckedUpdateManyWithoutColorNestedInput
  }

  export type ColorsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    hex?: StringFieldUpdateOperationsInput | string
  }

  export type ColorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    hex?: StringFieldUpdateOperationsInput | string
  }

  export type TreasureHuntCreateInput = {
    letter: string
    name: string
    Car?: CarCreateNestedManyWithoutTreasureHuntInput
  }

  export type TreasureHuntUncheckedCreateInput = {
    id?: number
    letter: string
    name: string
    Car?: CarUncheckedCreateNestedManyWithoutTreasureHuntInput
  }

  export type TreasureHuntUpdateInput = {
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Car?: CarUpdateManyWithoutTreasureHuntNestedInput
  }

  export type TreasureHuntUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Car?: CarUncheckedUpdateManyWithoutTreasureHuntNestedInput
  }

  export type TreasureHuntUpdateManyMutationInput = {
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TreasureHuntUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyCreateInput = {
    name: string
    photo?: string | null
    Car?: CarCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    name: string
    photo?: string | null
    Car?: CarUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    Car?: CarUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    Car?: CarUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExclusiveCreateInput = {
    letter: string
    name: string
    photo?: string | null
    Car?: CarCreateNestedManyWithoutExclusiveInput
  }

  export type ExclusiveUncheckedCreateInput = {
    id?: number
    letter: string
    name: string
    photo?: string | null
    Car?: CarUncheckedCreateNestedManyWithoutExclusiveInput
  }

  export type ExclusiveUpdateInput = {
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    Car?: CarUpdateManyWithoutExclusiveNestedInput
  }

  export type ExclusiveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    Car?: CarUncheckedUpdateManyWithoutExclusiveNestedInput
  }

  export type ExclusiveUpdateManyMutationInput = {
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExclusiveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CarCreateInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    color: ColorsCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateInput = {
    id?: number
    manufactureId: number
    code?: string | null
    yearId: number
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    companyId?: number
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarUpdateInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type CarUpdateManyMutationInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
  }

  export type User_carCreateInput = {
    user_id: UserCreateNestedOneWithoutUser_carInput
    car_id: CarCreateNestedOneWithoutUser_carInput
  }

  export type User_carUncheckedCreateInput = {
    id?: number
    userId: string
    carId: number
  }

  export type User_carUpdateInput = {
    user_id?: UserUpdateOneRequiredWithoutUser_carNestedInput
    car_id?: CarUpdateOneRequiredWithoutUser_carNestedInput
  }

  export type User_carUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    carId?: IntFieldUpdateOperationsInput | number
  }

  export type User_carUpdateManyMutationInput = {

  }

  export type User_carUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    carId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type User_carListRelationFilter = {
    every?: User_carWhereInput
    some?: User_carWhereInput
    none?: User_carWhereInput
  }

  export type User_carOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type CarListRelationFilter = {
    every?: CarWhereInput
    some?: CarWhereInput
    none?: CarWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ManufacturerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    flag?: SortOrder
    photo?: SortOrder
  }

  export type ManufacturerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ManufacturerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    flag?: SortOrder
    photo?: SortOrder
  }

  export type ManufacturerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    country?: SortOrder
    flag?: SortOrder
    photo?: SortOrder
  }

  export type ManufacturerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type YearCountOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrder
  }

  export type YearAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrder
  }

  export type YearMaxOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrder
  }

  export type YearMinOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrder
  }

  export type YearSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
    total?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type ColorsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hex?: SortOrder
  }

  export type ColorsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ColorsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hex?: SortOrder
  }

  export type ColorsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    hex?: SortOrder
  }

  export type ColorsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TreasureHuntCountOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
  }

  export type TreasureHuntAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TreasureHuntMaxOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
  }

  export type TreasureHuntMinOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
  }

  export type TreasureHuntSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    photo?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    photo?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    photo?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExclusiveCountOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    photo?: SortOrder
  }

  export type ExclusiveAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExclusiveMaxOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    photo?: SortOrder
  }

  export type ExclusiveMinOrderByAggregateInput = {
    id?: SortOrder
    letter?: SortOrder
    name?: SortOrder
    photo?: SortOrder
  }

  export type ExclusiveSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ManufacturerRelationFilter = {
    is?: ManufacturerWhereInput | null
    isNot?: ManufacturerWhereInput | null
  }

  export type ColorsRelationFilter = {
    is?: ColorsWhereInput | null
    isNot?: ColorsWhereInput | null
  }

  export type YearRelationFilter = {
    is?: YearWhereInput | null
    isNot?: YearWhereInput | null
  }

  export type TreasureHuntRelationFilter = {
    is?: TreasureHuntWhereInput | null
    isNot?: TreasureHuntWhereInput | null
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type ExclusiveRelationFilter = {
    is?: ExclusiveWhereInput | null
    isNot?: ExclusiveWhereInput | null
  }

  export type CarCountOrderByAggregateInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    code?: SortOrder
    yearId?: SortOrder
    year_number?: SortOrder
    colorId?: SortOrder
    color_wikia?: SortOrder
    rubber?: SortOrder
    custom?: SortOrder
    treasure_huntId?: SortOrder
    new_model?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    type?: SortOrder
    loose?: SortOrder
    price_buy?: SortOrder
    price_sell?: SortOrder
    sell?: SortOrder
  }

  export type CarAvgOrderByAggregateInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    yearId?: SortOrder
    year_number?: SortOrder
    colorId?: SortOrder
    treasure_huntId?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    price_buy?: SortOrder
    price_sell?: SortOrder
  }

  export type CarMaxOrderByAggregateInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    code?: SortOrder
    yearId?: SortOrder
    year_number?: SortOrder
    colorId?: SortOrder
    color_wikia?: SortOrder
    rubber?: SortOrder
    custom?: SortOrder
    treasure_huntId?: SortOrder
    new_model?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    type?: SortOrder
    loose?: SortOrder
    price_buy?: SortOrder
    price_sell?: SortOrder
    sell?: SortOrder
  }

  export type CarMinOrderByAggregateInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    code?: SortOrder
    yearId?: SortOrder
    year_number?: SortOrder
    colorId?: SortOrder
    color_wikia?: SortOrder
    rubber?: SortOrder
    custom?: SortOrder
    treasure_huntId?: SortOrder
    new_model?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    type?: SortOrder
    loose?: SortOrder
    price_buy?: SortOrder
    price_sell?: SortOrder
    sell?: SortOrder
  }

  export type CarSumOrderByAggregateInput = {
    id?: SortOrder
    manufactureId?: SortOrder
    yearId?: SortOrder
    year_number?: SortOrder
    colorId?: SortOrder
    treasure_huntId?: SortOrder
    companyId?: SortOrder
    exclusiveId?: SortOrder
    price_buy?: SortOrder
    price_sell?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CarRelationFilter = {
    is?: CarWhereInput | null
    isNot?: CarWhereInput | null
  }

  export type User_carCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
  }

  export type User_carAvgOrderByAggregateInput = {
    id?: SortOrder
    carId?: SortOrder
  }

  export type User_carMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
  }

  export type User_carMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    carId?: SortOrder
  }

  export type User_carSumOrderByAggregateInput = {
    id?: SortOrder
    carId?: SortOrder
  }

  export type User_carCreateNestedManyWithoutUser_idInput = {
    create?: XOR<Enumerable<User_carCreateWithoutUser_idInput>, Enumerable<User_carUncheckedCreateWithoutUser_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutUser_idInput>
    connect?: Enumerable<User_carWhereUniqueInput>
  }

  export type User_carUncheckedCreateNestedManyWithoutUser_idInput = {
    create?: XOR<Enumerable<User_carCreateWithoutUser_idInput>, Enumerable<User_carUncheckedCreateWithoutUser_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutUser_idInput>
    connect?: Enumerable<User_carWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type User_carUpdateManyWithoutUser_idNestedInput = {
    create?: XOR<Enumerable<User_carCreateWithoutUser_idInput>, Enumerable<User_carUncheckedCreateWithoutUser_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutUser_idInput>
    upsert?: Enumerable<User_carUpsertWithWhereUniqueWithoutUser_idInput>
    set?: Enumerable<User_carWhereUniqueInput>
    disconnect?: Enumerable<User_carWhereUniqueInput>
    delete?: Enumerable<User_carWhereUniqueInput>
    connect?: Enumerable<User_carWhereUniqueInput>
    update?: Enumerable<User_carUpdateWithWhereUniqueWithoutUser_idInput>
    updateMany?: Enumerable<User_carUpdateManyWithWhereWithoutUser_idInput>
    deleteMany?: Enumerable<User_carScalarWhereInput>
  }

  export type User_carUncheckedUpdateManyWithoutUser_idNestedInput = {
    create?: XOR<Enumerable<User_carCreateWithoutUser_idInput>, Enumerable<User_carUncheckedCreateWithoutUser_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutUser_idInput>
    upsert?: Enumerable<User_carUpsertWithWhereUniqueWithoutUser_idInput>
    set?: Enumerable<User_carWhereUniqueInput>
    disconnect?: Enumerable<User_carWhereUniqueInput>
    delete?: Enumerable<User_carWhereUniqueInput>
    connect?: Enumerable<User_carWhereUniqueInput>
    update?: Enumerable<User_carUpdateWithWhereUniqueWithoutUser_idInput>
    updateMany?: Enumerable<User_carUpdateManyWithWhereWithoutUser_idInput>
    deleteMany?: Enumerable<User_carScalarWhereInput>
  }

  export type CarCreateNestedManyWithoutManufactureInput = {
    create?: XOR<Enumerable<CarCreateWithoutManufactureInput>, Enumerable<CarUncheckedCreateWithoutManufactureInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutManufactureInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutManufactureInput = {
    create?: XOR<Enumerable<CarCreateWithoutManufactureInput>, Enumerable<CarUncheckedCreateWithoutManufactureInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutManufactureInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CarUpdateManyWithoutManufactureNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutManufactureInput>, Enumerable<CarUncheckedCreateWithoutManufactureInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutManufactureInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutManufactureInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutManufactureInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutManufactureInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CarUncheckedUpdateManyWithoutManufactureNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutManufactureInput>, Enumerable<CarUncheckedCreateWithoutManufactureInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutManufactureInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutManufactureInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutManufactureInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutManufactureInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarCreateNestedManyWithoutYearInput = {
    create?: XOR<Enumerable<CarCreateWithoutYearInput>, Enumerable<CarUncheckedCreateWithoutYearInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutYearInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutYearInput = {
    create?: XOR<Enumerable<CarCreateWithoutYearInput>, Enumerable<CarUncheckedCreateWithoutYearInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutYearInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CarUpdateManyWithoutYearNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutYearInput>, Enumerable<CarUncheckedCreateWithoutYearInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutYearInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutYearInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutYearInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutYearInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarUncheckedUpdateManyWithoutYearNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutYearInput>, Enumerable<CarUncheckedCreateWithoutYearInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutYearInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutYearInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutYearInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutYearInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarCreateNestedManyWithoutColorInput = {
    create?: XOR<Enumerable<CarCreateWithoutColorInput>, Enumerable<CarUncheckedCreateWithoutColorInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutColorInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutColorInput = {
    create?: XOR<Enumerable<CarCreateWithoutColorInput>, Enumerable<CarUncheckedCreateWithoutColorInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutColorInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUpdateManyWithoutColorNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutColorInput>, Enumerable<CarUncheckedCreateWithoutColorInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutColorInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutColorInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutColorInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutColorInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarUncheckedUpdateManyWithoutColorNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutColorInput>, Enumerable<CarUncheckedCreateWithoutColorInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutColorInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutColorInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutColorInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutColorInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarCreateNestedManyWithoutTreasureHuntInput = {
    create?: XOR<Enumerable<CarCreateWithoutTreasureHuntInput>, Enumerable<CarUncheckedCreateWithoutTreasureHuntInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutTreasureHuntInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutTreasureHuntInput = {
    create?: XOR<Enumerable<CarCreateWithoutTreasureHuntInput>, Enumerable<CarUncheckedCreateWithoutTreasureHuntInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutTreasureHuntInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUpdateManyWithoutTreasureHuntNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutTreasureHuntInput>, Enumerable<CarUncheckedCreateWithoutTreasureHuntInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutTreasureHuntInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutTreasureHuntInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutTreasureHuntInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutTreasureHuntInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarUncheckedUpdateManyWithoutTreasureHuntNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutTreasureHuntInput>, Enumerable<CarUncheckedCreateWithoutTreasureHuntInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutTreasureHuntInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutTreasureHuntInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutTreasureHuntInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutTreasureHuntInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<CarCreateWithoutCompanyInput>, Enumerable<CarUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutCompanyInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<CarCreateWithoutCompanyInput>, Enumerable<CarUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutCompanyInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutCompanyInput>, Enumerable<CarUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutCompanyInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutCompanyInput>, Enumerable<CarUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutCompanyInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarCreateNestedManyWithoutExclusiveInput = {
    create?: XOR<Enumerable<CarCreateWithoutExclusiveInput>, Enumerable<CarUncheckedCreateWithoutExclusiveInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutExclusiveInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUncheckedCreateNestedManyWithoutExclusiveInput = {
    create?: XOR<Enumerable<CarCreateWithoutExclusiveInput>, Enumerable<CarUncheckedCreateWithoutExclusiveInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutExclusiveInput>
    connect?: Enumerable<CarWhereUniqueInput>
  }

  export type CarUpdateManyWithoutExclusiveNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutExclusiveInput>, Enumerable<CarUncheckedCreateWithoutExclusiveInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutExclusiveInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutExclusiveInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutExclusiveInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutExclusiveInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type CarUncheckedUpdateManyWithoutExclusiveNestedInput = {
    create?: XOR<Enumerable<CarCreateWithoutExclusiveInput>, Enumerable<CarUncheckedCreateWithoutExclusiveInput>>
    connectOrCreate?: Enumerable<CarCreateOrConnectWithoutExclusiveInput>
    upsert?: Enumerable<CarUpsertWithWhereUniqueWithoutExclusiveInput>
    set?: Enumerable<CarWhereUniqueInput>
    disconnect?: Enumerable<CarWhereUniqueInput>
    delete?: Enumerable<CarWhereUniqueInput>
    connect?: Enumerable<CarWhereUniqueInput>
    update?: Enumerable<CarUpdateWithWhereUniqueWithoutExclusiveInput>
    updateMany?: Enumerable<CarUpdateManyWithWhereWithoutExclusiveInput>
    deleteMany?: Enumerable<CarScalarWhereInput>
  }

  export type User_carCreateNestedManyWithoutCar_idInput = {
    create?: XOR<Enumerable<User_carCreateWithoutCar_idInput>, Enumerable<User_carUncheckedCreateWithoutCar_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutCar_idInput>
    connect?: Enumerable<User_carWhereUniqueInput>
  }

  export type ManufacturerCreateNestedOneWithoutCarInput = {
    create?: XOR<ManufacturerCreateWithoutCarInput, ManufacturerUncheckedCreateWithoutCarInput>
    connectOrCreate?: ManufacturerCreateOrConnectWithoutCarInput
    connect?: ManufacturerWhereUniqueInput
  }

  export type ColorsCreateNestedOneWithoutCarInput = {
    create?: XOR<ColorsCreateWithoutCarInput, ColorsUncheckedCreateWithoutCarInput>
    connectOrCreate?: ColorsCreateOrConnectWithoutCarInput
    connect?: ColorsWhereUniqueInput
  }

  export type YearCreateNestedOneWithoutCarInput = {
    create?: XOR<YearCreateWithoutCarInput, YearUncheckedCreateWithoutCarInput>
    connectOrCreate?: YearCreateOrConnectWithoutCarInput
    connect?: YearWhereUniqueInput
  }

  export type TreasureHuntCreateNestedOneWithoutCarInput = {
    create?: XOR<TreasureHuntCreateWithoutCarInput, TreasureHuntUncheckedCreateWithoutCarInput>
    connectOrCreate?: TreasureHuntCreateOrConnectWithoutCarInput
    connect?: TreasureHuntWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutCarInput = {
    create?: XOR<CompanyCreateWithoutCarInput, CompanyUncheckedCreateWithoutCarInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCarInput
    connect?: CompanyWhereUniqueInput
  }

  export type ExclusiveCreateNestedOneWithoutCarInput = {
    create?: XOR<ExclusiveCreateWithoutCarInput, ExclusiveUncheckedCreateWithoutCarInput>
    connectOrCreate?: ExclusiveCreateOrConnectWithoutCarInput
    connect?: ExclusiveWhereUniqueInput
  }

  export type User_carUncheckedCreateNestedManyWithoutCar_idInput = {
    create?: XOR<Enumerable<User_carCreateWithoutCar_idInput>, Enumerable<User_carUncheckedCreateWithoutCar_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutCar_idInput>
    connect?: Enumerable<User_carWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type User_carUpdateManyWithoutCar_idNestedInput = {
    create?: XOR<Enumerable<User_carCreateWithoutCar_idInput>, Enumerable<User_carUncheckedCreateWithoutCar_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutCar_idInput>
    upsert?: Enumerable<User_carUpsertWithWhereUniqueWithoutCar_idInput>
    set?: Enumerable<User_carWhereUniqueInput>
    disconnect?: Enumerable<User_carWhereUniqueInput>
    delete?: Enumerable<User_carWhereUniqueInput>
    connect?: Enumerable<User_carWhereUniqueInput>
    update?: Enumerable<User_carUpdateWithWhereUniqueWithoutCar_idInput>
    updateMany?: Enumerable<User_carUpdateManyWithWhereWithoutCar_idInput>
    deleteMany?: Enumerable<User_carScalarWhereInput>
  }

  export type ManufacturerUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<ManufacturerCreateWithoutCarInput, ManufacturerUncheckedCreateWithoutCarInput>
    connectOrCreate?: ManufacturerCreateOrConnectWithoutCarInput
    upsert?: ManufacturerUpsertWithoutCarInput
    connect?: ManufacturerWhereUniqueInput
    update?: XOR<ManufacturerUpdateWithoutCarInput, ManufacturerUncheckedUpdateWithoutCarInput>
  }

  export type ColorsUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<ColorsCreateWithoutCarInput, ColorsUncheckedCreateWithoutCarInput>
    connectOrCreate?: ColorsCreateOrConnectWithoutCarInput
    upsert?: ColorsUpsertWithoutCarInput
    connect?: ColorsWhereUniqueInput
    update?: XOR<ColorsUpdateWithoutCarInput, ColorsUncheckedUpdateWithoutCarInput>
  }

  export type YearUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<YearCreateWithoutCarInput, YearUncheckedCreateWithoutCarInput>
    connectOrCreate?: YearCreateOrConnectWithoutCarInput
    upsert?: YearUpsertWithoutCarInput
    connect?: YearWhereUniqueInput
    update?: XOR<YearUpdateWithoutCarInput, YearUncheckedUpdateWithoutCarInput>
  }

  export type TreasureHuntUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<TreasureHuntCreateWithoutCarInput, TreasureHuntUncheckedCreateWithoutCarInput>
    connectOrCreate?: TreasureHuntCreateOrConnectWithoutCarInput
    upsert?: TreasureHuntUpsertWithoutCarInput
    connect?: TreasureHuntWhereUniqueInput
    update?: XOR<TreasureHuntUpdateWithoutCarInput, TreasureHuntUncheckedUpdateWithoutCarInput>
  }

  export type CompanyUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<CompanyCreateWithoutCarInput, CompanyUncheckedCreateWithoutCarInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCarInput
    upsert?: CompanyUpsertWithoutCarInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<CompanyUpdateWithoutCarInput, CompanyUncheckedUpdateWithoutCarInput>
  }

  export type ExclusiveUpdateOneRequiredWithoutCarNestedInput = {
    create?: XOR<ExclusiveCreateWithoutCarInput, ExclusiveUncheckedCreateWithoutCarInput>
    connectOrCreate?: ExclusiveCreateOrConnectWithoutCarInput
    upsert?: ExclusiveUpsertWithoutCarInput
    connect?: ExclusiveWhereUniqueInput
    update?: XOR<ExclusiveUpdateWithoutCarInput, ExclusiveUncheckedUpdateWithoutCarInput>
  }

  export type User_carUncheckedUpdateManyWithoutCar_idNestedInput = {
    create?: XOR<Enumerable<User_carCreateWithoutCar_idInput>, Enumerable<User_carUncheckedCreateWithoutCar_idInput>>
    connectOrCreate?: Enumerable<User_carCreateOrConnectWithoutCar_idInput>
    upsert?: Enumerable<User_carUpsertWithWhereUniqueWithoutCar_idInput>
    set?: Enumerable<User_carWhereUniqueInput>
    disconnect?: Enumerable<User_carWhereUniqueInput>
    delete?: Enumerable<User_carWhereUniqueInput>
    connect?: Enumerable<User_carWhereUniqueInput>
    update?: Enumerable<User_carUpdateWithWhereUniqueWithoutCar_idInput>
    updateMany?: Enumerable<User_carUpdateManyWithWhereWithoutCar_idInput>
    deleteMany?: Enumerable<User_carScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUser_carInput = {
    create?: XOR<UserCreateWithoutUser_carInput, UserUncheckedCreateWithoutUser_carInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_carInput
    connect?: UserWhereUniqueInput
  }

  export type CarCreateNestedOneWithoutUser_carInput = {
    create?: XOR<CarCreateWithoutUser_carInput, CarUncheckedCreateWithoutUser_carInput>
    connectOrCreate?: CarCreateOrConnectWithoutUser_carInput
    connect?: CarWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUser_carNestedInput = {
    create?: XOR<UserCreateWithoutUser_carInput, UserUncheckedCreateWithoutUser_carInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_carInput
    upsert?: UserUpsertWithoutUser_carInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUser_carInput, UserUncheckedUpdateWithoutUser_carInput>
  }

  export type CarUpdateOneRequiredWithoutUser_carNestedInput = {
    create?: XOR<CarCreateWithoutUser_carInput, CarUncheckedCreateWithoutUser_carInput>
    connectOrCreate?: CarCreateOrConnectWithoutUser_carInput
    upsert?: CarUpsertWithoutUser_carInput
    connect?: CarWhereUniqueInput
    update?: XOR<CarUpdateWithoutUser_carInput, CarUncheckedUpdateWithoutUser_carInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type User_carCreateWithoutUser_idInput = {
    car_id: CarCreateNestedOneWithoutUser_carInput
  }

  export type User_carUncheckedCreateWithoutUser_idInput = {
    id?: number
    carId: number
  }

  export type User_carCreateOrConnectWithoutUser_idInput = {
    where: User_carWhereUniqueInput
    create: XOR<User_carCreateWithoutUser_idInput, User_carUncheckedCreateWithoutUser_idInput>
  }

  export type User_carUpsertWithWhereUniqueWithoutUser_idInput = {
    where: User_carWhereUniqueInput
    update: XOR<User_carUpdateWithoutUser_idInput, User_carUncheckedUpdateWithoutUser_idInput>
    create: XOR<User_carCreateWithoutUser_idInput, User_carUncheckedCreateWithoutUser_idInput>
  }

  export type User_carUpdateWithWhereUniqueWithoutUser_idInput = {
    where: User_carWhereUniqueInput
    data: XOR<User_carUpdateWithoutUser_idInput, User_carUncheckedUpdateWithoutUser_idInput>
  }

  export type User_carUpdateManyWithWhereWithoutUser_idInput = {
    where: User_carScalarWhereInput
    data: XOR<User_carUpdateManyMutationInput, User_carUncheckedUpdateManyWithoutUser_carInput>
  }

  export type User_carScalarWhereInput = {
    AND?: Enumerable<User_carScalarWhereInput>
    OR?: Enumerable<User_carScalarWhereInput>
    NOT?: Enumerable<User_carScalarWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    carId?: IntFilter | number
  }

  export type CarCreateWithoutManufactureInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    color: ColorsCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutManufactureInput = {
    id?: number
    code?: string | null
    yearId: number
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    companyId?: number
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarCreateOrConnectWithoutManufactureInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutManufactureInput, CarUncheckedCreateWithoutManufactureInput>
  }

  export type CarUpsertWithWhereUniqueWithoutManufactureInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutManufactureInput, CarUncheckedUpdateWithoutManufactureInput>
    create: XOR<CarCreateWithoutManufactureInput, CarUncheckedCreateWithoutManufactureInput>
  }

  export type CarUpdateWithWhereUniqueWithoutManufactureInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutManufactureInput, CarUncheckedUpdateWithoutManufactureInput>
  }

  export type CarUpdateManyWithWhereWithoutManufactureInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type CarScalarWhereInput = {
    AND?: Enumerable<CarScalarWhereInput>
    OR?: Enumerable<CarScalarWhereInput>
    NOT?: Enumerable<CarScalarWhereInput>
    id?: IntFilter | number
    manufactureId?: IntFilter | number
    code?: StringNullableFilter | string | null
    yearId?: IntFilter | number
    year_number?: IntNullableFilter | number | null
    colorId?: IntFilter | number
    color_wikia?: StringNullableFilter | string | null
    rubber?: BoolFilter | boolean
    custom?: BoolFilter | boolean
    treasure_huntId?: IntFilter | number
    new_model?: BoolFilter | boolean
    companyId?: IntFilter | number
    exclusiveId?: IntFilter | number
    type?: StringNullableFilter | string | null
    loose?: BoolFilter | boolean
    price_buy?: FloatNullableFilter | number | null
    price_sell?: FloatNullableFilter | number | null
    sell?: BoolFilter | boolean
  }

  export type CarCreateWithoutYearInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    color: ColorsCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutYearInput = {
    id?: number
    manufactureId: number
    code?: string | null
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    companyId?: number
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarCreateOrConnectWithoutYearInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutYearInput, CarUncheckedCreateWithoutYearInput>
  }

  export type CarUpsertWithWhereUniqueWithoutYearInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutYearInput, CarUncheckedUpdateWithoutYearInput>
    create: XOR<CarCreateWithoutYearInput, CarUncheckedCreateWithoutYearInput>
  }

  export type CarUpdateWithWhereUniqueWithoutYearInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutYearInput, CarUncheckedUpdateWithoutYearInput>
  }

  export type CarUpdateManyWithWhereWithoutYearInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type CarCreateWithoutColorInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutColorInput = {
    id?: number
    manufactureId: number
    code?: string | null
    yearId: number
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    companyId?: number
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarCreateOrConnectWithoutColorInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutColorInput, CarUncheckedCreateWithoutColorInput>
  }

  export type CarUpsertWithWhereUniqueWithoutColorInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutColorInput, CarUncheckedUpdateWithoutColorInput>
    create: XOR<CarCreateWithoutColorInput, CarUncheckedCreateWithoutColorInput>
  }

  export type CarUpdateWithWhereUniqueWithoutColorInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutColorInput, CarUncheckedUpdateWithoutColorInput>
  }

  export type CarUpdateManyWithWhereWithoutColorInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type CarCreateWithoutTreasureHuntInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    color: ColorsCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutTreasureHuntInput = {
    id?: number
    manufactureId: number
    code?: string | null
    yearId: number
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    companyId?: number
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarCreateOrConnectWithoutTreasureHuntInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutTreasureHuntInput, CarUncheckedCreateWithoutTreasureHuntInput>
  }

  export type CarUpsertWithWhereUniqueWithoutTreasureHuntInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutTreasureHuntInput, CarUncheckedUpdateWithoutTreasureHuntInput>
    create: XOR<CarCreateWithoutTreasureHuntInput, CarUncheckedCreateWithoutTreasureHuntInput>
  }

  export type CarUpdateWithWhereUniqueWithoutTreasureHuntInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutTreasureHuntInput, CarUncheckedUpdateWithoutTreasureHuntInput>
  }

  export type CarUpdateManyWithWhereWithoutTreasureHuntInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type CarCreateWithoutCompanyInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    color: ColorsCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutCompanyInput = {
    id?: number
    manufactureId: number
    code?: string | null
    yearId: number
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarCreateOrConnectWithoutCompanyInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutCompanyInput, CarUncheckedCreateWithoutCompanyInput>
  }

  export type CarUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutCompanyInput, CarUncheckedUpdateWithoutCompanyInput>
    create: XOR<CarCreateWithoutCompanyInput, CarUncheckedCreateWithoutCompanyInput>
  }

  export type CarUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutCompanyInput, CarUncheckedUpdateWithoutCompanyInput>
  }

  export type CarUpdateManyWithWhereWithoutCompanyInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type CarCreateWithoutExclusiveInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carCreateNestedManyWithoutCar_idInput
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    color: ColorsCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutExclusiveInput = {
    id?: number
    manufactureId: number
    code?: string | null
    yearId: number
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    companyId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    User_car?: User_carUncheckedCreateNestedManyWithoutCar_idInput
  }

  export type CarCreateOrConnectWithoutExclusiveInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutExclusiveInput, CarUncheckedCreateWithoutExclusiveInput>
  }

  export type CarUpsertWithWhereUniqueWithoutExclusiveInput = {
    where: CarWhereUniqueInput
    update: XOR<CarUpdateWithoutExclusiveInput, CarUncheckedUpdateWithoutExclusiveInput>
    create: XOR<CarCreateWithoutExclusiveInput, CarUncheckedCreateWithoutExclusiveInput>
  }

  export type CarUpdateWithWhereUniqueWithoutExclusiveInput = {
    where: CarWhereUniqueInput
    data: XOR<CarUpdateWithoutExclusiveInput, CarUncheckedUpdateWithoutExclusiveInput>
  }

  export type CarUpdateManyWithWhereWithoutExclusiveInput = {
    where: CarScalarWhereInput
    data: XOR<CarUpdateManyMutationInput, CarUncheckedUpdateManyWithoutCarInput>
  }

  export type User_carCreateWithoutCar_idInput = {
    user_id: UserCreateNestedOneWithoutUser_carInput
  }

  export type User_carUncheckedCreateWithoutCar_idInput = {
    id?: number
    userId: string
  }

  export type User_carCreateOrConnectWithoutCar_idInput = {
    where: User_carWhereUniqueInput
    create: XOR<User_carCreateWithoutCar_idInput, User_carUncheckedCreateWithoutCar_idInput>
  }

  export type ManufacturerCreateWithoutCarInput = {
    name: string
    country?: string | null
    flag?: string | null
    photo?: string | null
  }

  export type ManufacturerUncheckedCreateWithoutCarInput = {
    id?: number
    name: string
    country?: string | null
    flag?: string | null
    photo?: string | null
  }

  export type ManufacturerCreateOrConnectWithoutCarInput = {
    where: ManufacturerWhereUniqueInput
    create: XOR<ManufacturerCreateWithoutCarInput, ManufacturerUncheckedCreateWithoutCarInput>
  }

  export type ColorsCreateWithoutCarInput = {
    name: string
    hex: string
  }

  export type ColorsUncheckedCreateWithoutCarInput = {
    id?: number
    name: string
    hex: string
  }

  export type ColorsCreateOrConnectWithoutCarInput = {
    where: ColorsWhereUniqueInput
    create: XOR<ColorsCreateWithoutCarInput, ColorsUncheckedCreateWithoutCarInput>
  }

  export type YearCreateWithoutCarInput = {
    year: number
    total?: number | null
  }

  export type YearUncheckedCreateWithoutCarInput = {
    id?: number
    year: number
    total?: number | null
  }

  export type YearCreateOrConnectWithoutCarInput = {
    where: YearWhereUniqueInput
    create: XOR<YearCreateWithoutCarInput, YearUncheckedCreateWithoutCarInput>
  }

  export type TreasureHuntCreateWithoutCarInput = {
    letter: string
    name: string
  }

  export type TreasureHuntUncheckedCreateWithoutCarInput = {
    id?: number
    letter: string
    name: string
  }

  export type TreasureHuntCreateOrConnectWithoutCarInput = {
    where: TreasureHuntWhereUniqueInput
    create: XOR<TreasureHuntCreateWithoutCarInput, TreasureHuntUncheckedCreateWithoutCarInput>
  }

  export type CompanyCreateWithoutCarInput = {
    name: string
    photo?: string | null
  }

  export type CompanyUncheckedCreateWithoutCarInput = {
    id?: number
    name: string
    photo?: string | null
  }

  export type CompanyCreateOrConnectWithoutCarInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCarInput, CompanyUncheckedCreateWithoutCarInput>
  }

  export type ExclusiveCreateWithoutCarInput = {
    letter: string
    name: string
    photo?: string | null
  }

  export type ExclusiveUncheckedCreateWithoutCarInput = {
    id?: number
    letter: string
    name: string
    photo?: string | null
  }

  export type ExclusiveCreateOrConnectWithoutCarInput = {
    where: ExclusiveWhereUniqueInput
    create: XOR<ExclusiveCreateWithoutCarInput, ExclusiveUncheckedCreateWithoutCarInput>
  }

  export type User_carUpsertWithWhereUniqueWithoutCar_idInput = {
    where: User_carWhereUniqueInput
    update: XOR<User_carUpdateWithoutCar_idInput, User_carUncheckedUpdateWithoutCar_idInput>
    create: XOR<User_carCreateWithoutCar_idInput, User_carUncheckedCreateWithoutCar_idInput>
  }

  export type User_carUpdateWithWhereUniqueWithoutCar_idInput = {
    where: User_carWhereUniqueInput
    data: XOR<User_carUpdateWithoutCar_idInput, User_carUncheckedUpdateWithoutCar_idInput>
  }

  export type User_carUpdateManyWithWhereWithoutCar_idInput = {
    where: User_carScalarWhereInput
    data: XOR<User_carUpdateManyMutationInput, User_carUncheckedUpdateManyWithoutUser_carInput>
  }

  export type ManufacturerUpsertWithoutCarInput = {
    update: XOR<ManufacturerUpdateWithoutCarInput, ManufacturerUncheckedUpdateWithoutCarInput>
    create: XOR<ManufacturerCreateWithoutCarInput, ManufacturerUncheckedCreateWithoutCarInput>
  }

  export type ManufacturerUpdateWithoutCarInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManufacturerUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    country?: NullableStringFieldUpdateOperationsInput | string | null
    flag?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ColorsUpsertWithoutCarInput = {
    update: XOR<ColorsUpdateWithoutCarInput, ColorsUncheckedUpdateWithoutCarInput>
    create: XOR<ColorsCreateWithoutCarInput, ColorsUncheckedCreateWithoutCarInput>
  }

  export type ColorsUpdateWithoutCarInput = {
    name?: StringFieldUpdateOperationsInput | string
    hex?: StringFieldUpdateOperationsInput | string
  }

  export type ColorsUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    hex?: StringFieldUpdateOperationsInput | string
  }

  export type YearUpsertWithoutCarInput = {
    update: XOR<YearUpdateWithoutCarInput, YearUncheckedUpdateWithoutCarInput>
    create: XOR<YearCreateWithoutCarInput, YearUncheckedCreateWithoutCarInput>
  }

  export type YearUpdateWithoutCarInput = {
    year?: IntFieldUpdateOperationsInput | number
    total?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type YearUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TreasureHuntUpsertWithoutCarInput = {
    update: XOR<TreasureHuntUpdateWithoutCarInput, TreasureHuntUncheckedUpdateWithoutCarInput>
    create: XOR<TreasureHuntCreateWithoutCarInput, TreasureHuntUncheckedCreateWithoutCarInput>
  }

  export type TreasureHuntUpdateWithoutCarInput = {
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TreasureHuntUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUpsertWithoutCarInput = {
    update: XOR<CompanyUpdateWithoutCarInput, CompanyUncheckedUpdateWithoutCarInput>
    create: XOR<CompanyCreateWithoutCarInput, CompanyUncheckedCreateWithoutCarInput>
  }

  export type CompanyUpdateWithoutCarInput = {
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompanyUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExclusiveUpsertWithoutCarInput = {
    update: XOR<ExclusiveUpdateWithoutCarInput, ExclusiveUncheckedUpdateWithoutCarInput>
    create: XOR<ExclusiveCreateWithoutCarInput, ExclusiveUncheckedCreateWithoutCarInput>
  }

  export type ExclusiveUpdateWithoutCarInput = {
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExclusiveUncheckedUpdateWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    letter?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutUser_carInput = {
    id?: string
    name: string
    email: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutUser_carInput = {
    id?: string
    name: string
    email: string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutUser_carInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_carInput, UserUncheckedCreateWithoutUser_carInput>
  }

  export type CarCreateWithoutUser_carInput = {
    code?: string | null
    year_number?: number | null
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    new_model?: boolean
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
    manufacture: ManufacturerCreateNestedOneWithoutCarInput
    color: ColorsCreateNestedOneWithoutCarInput
    year: YearCreateNestedOneWithoutCarInput
    treasureHunt: TreasureHuntCreateNestedOneWithoutCarInput
    company?: CompanyCreateNestedOneWithoutCarInput
    exclusive?: ExclusiveCreateNestedOneWithoutCarInput
  }

  export type CarUncheckedCreateWithoutUser_carInput = {
    id?: number
    manufactureId: number
    code?: string | null
    yearId: number
    year_number?: number | null
    colorId: number
    color_wikia?: string | null
    rubber?: boolean
    custom?: boolean
    treasure_huntId: number
    new_model?: boolean
    companyId?: number
    exclusiveId?: number
    type?: string | null
    loose?: boolean
    price_buy?: number | null
    price_sell?: number | null
    sell?: boolean
  }

  export type CarCreateOrConnectWithoutUser_carInput = {
    where: CarWhereUniqueInput
    create: XOR<CarCreateWithoutUser_carInput, CarUncheckedCreateWithoutUser_carInput>
  }

  export type UserUpsertWithoutUser_carInput = {
    update: XOR<UserUpdateWithoutUser_carInput, UserUncheckedUpdateWithoutUser_carInput>
    create: XOR<UserCreateWithoutUser_carInput, UserUncheckedCreateWithoutUser_carInput>
  }

  export type UserUpdateWithoutUser_carInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutUser_carInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CarUpsertWithoutUser_carInput = {
    update: XOR<CarUpdateWithoutUser_carInput, CarUncheckedUpdateWithoutUser_carInput>
    create: XOR<CarCreateWithoutUser_carInput, CarUncheckedCreateWithoutUser_carInput>
  }

  export type CarUpdateWithoutUser_carInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutUser_carInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
  }

  export type User_carUpdateWithoutUser_idInput = {
    car_id?: CarUpdateOneRequiredWithoutUser_carNestedInput
  }

  export type User_carUncheckedUpdateWithoutUser_idInput = {
    id?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
  }

  export type User_carUncheckedUpdateManyWithoutUser_carInput = {
    id?: IntFieldUpdateOperationsInput | number
    carId?: IntFieldUpdateOperationsInput | number
  }

  export type CarUpdateWithoutManufactureInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutManufactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type CarUncheckedUpdateManyWithoutCarInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CarUpdateWithoutYearInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutYearInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type CarUpdateWithoutColorInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutColorInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type CarUpdateWithoutTreasureHuntInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutTreasureHuntInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type CarUpdateWithoutCompanyInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    exclusive?: ExclusiveUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    exclusiveId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type CarUpdateWithoutExclusiveInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    new_model?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUpdateManyWithoutCar_idNestedInput
    manufacture?: ManufacturerUpdateOneRequiredWithoutCarNestedInput
    color?: ColorsUpdateOneRequiredWithoutCarNestedInput
    year?: YearUpdateOneRequiredWithoutCarNestedInput
    treasureHunt?: TreasureHuntUpdateOneRequiredWithoutCarNestedInput
    company?: CompanyUpdateOneRequiredWithoutCarNestedInput
  }

  export type CarUncheckedUpdateWithoutExclusiveInput = {
    id?: IntFieldUpdateOperationsInput | number
    manufactureId?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    yearId?: IntFieldUpdateOperationsInput | number
    year_number?: NullableIntFieldUpdateOperationsInput | number | null
    colorId?: IntFieldUpdateOperationsInput | number
    color_wikia?: NullableStringFieldUpdateOperationsInput | string | null
    rubber?: BoolFieldUpdateOperationsInput | boolean
    custom?: BoolFieldUpdateOperationsInput | boolean
    treasure_huntId?: IntFieldUpdateOperationsInput | number
    new_model?: BoolFieldUpdateOperationsInput | boolean
    companyId?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    loose?: BoolFieldUpdateOperationsInput | boolean
    price_buy?: NullableFloatFieldUpdateOperationsInput | number | null
    price_sell?: NullableFloatFieldUpdateOperationsInput | number | null
    sell?: BoolFieldUpdateOperationsInput | boolean
    User_car?: User_carUncheckedUpdateManyWithoutCar_idNestedInput
  }

  export type User_carUpdateWithoutCar_idInput = {
    user_id?: UserUpdateOneRequiredWithoutUser_carNestedInput
  }

  export type User_carUncheckedUpdateWithoutCar_idInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}